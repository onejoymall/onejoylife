<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="mall.MgSystemMapper">
    <insert id="insertSystemHistory" parameterType="java.util.Map">
        insert into system_log(
        email,
        user_ip,
        work_history
        )values(
       #{email},
       #{user_ip},
       #{work_history}
        )
    </insert>
    <insert id="insertSystemDeleteHistory" parameterType="com.webapp.manager.vo.MgCommonVO">
        insert into product_delete_history select * from product where ${pk} in
        <foreach collection="chk" item="item" open="(" separator="," close=")">
             #{item}
        </foreach>
    </insert>
    <select id="systemHistoryList" parameterType="com.webapp.manager.vo.MgSystemVO" resultType="java.util.Map">
    select *
    from system_log A
    where 1=1
    order by A.reg_date desc
	LIMIT ${rowStart-1}, ${displayRowCount}
  </select>
    <select id="systemHistoryListCount" parameterType="com.webapp.manager.vo.MgSystemVO" resultType="Integer">
    select ifnull(count(*),0) cnt
    from system_log A
    where 1=1

  </select>

  <insert id="insertSystemDelivery" parameterType="com.webapp.manager.vo.MgDeliveryVO">
      insert into store_delivery
      (
        store_id,
        product_delivery_class,
        product_delivery_type,
        product_delivery_International_type,
        product_delivery_locale,
        product_delivery_payment_type,
        product_delivery_date,
        product_delivery_payment_class,
        product_delivery_payment,
        product_delivery_store_pickup,
		product_delivery_hope_date_yn,
		product_delivery_hope_time_yn,
		product_delivery_bundle_yn,
		refund_postcode,
		refund_roadAddress,
		refund_jibunAddress,
		refund_extraAddress,
		forward_postcode,
		forward_roadAddress,
		forward_jibunAddress,
		forward_extraAddress,
		refund_value,
		forward_value
      )
      values
      (
        #{store_id},
        #{product_delivery_class},
        #{product_delivery_type},
        #{product_delivery_International_type},
        #{product_delivery_locale},
        #{product_delivery_payment_type},
        #{product_delivery_date},
        #{product_delivery_payment_class},
        #{product_delivery_payment},
        #{product_delivery_store_pickup},
        #{hope_delivery_date_yn},
		#{hope_delivery_time_yn},
		#{bundle_delivery_yn},
        #{refund_postcode},
		#{refund_roadAddress},
		#{refund_jibunAddress},
		#{refund_extraAddress},
		#{postcode},
		#{roadAddress},
		#{jibunAddress},
		#{extraAddress},
		#{refund_value},
		#{forward_value}
      )
      on duplicate KEY update
        store_id=#{store_id},
        product_delivery_class=#{product_delivery_class},
        product_delivery_type=#{product_delivery_type},
        product_delivery_International_type=#{product_delivery_International_type},
        product_delivery_locale=#{product_delivery_locale},
        product_delivery_payment_type=#{product_delivery_payment_type},
        product_delivery_date=#{product_delivery_date},
        product_delivery_payment_class=#{product_delivery_payment_class},
        product_delivery_payment=#{product_delivery_payment},
        product_delivery_store_pickup=#{product_delivery_store_pickup},
		product_delivery_hope_date_yn = #{hope_delivery_date_yn},
		product_delivery_hope_time_yn = #{hope_delivery_time_yn},
		product_delivery_bundle_yn = #{bundle_delivery_yn},
		refund_postcode = #{refund_postcode},
		refund_roadAddress = #{refund_roadAddress},
		refund_jibunAddress = #{refund_jibunAddress},
		refund_extraAddress = #{refund_extraAddress},
		forward_postcode = #{postcode},
		forward_roadAddress = #{roadAddress},
		forward_jibunAddress = #{jibunAddress},
		forward_extraAddress = #{extraAddress},
		refund_value = #{refund_value},
		forward_value = #{forward_value}
    </insert>

    <select id="getSystemDelivery" parameterType="com.webapp.manager.vo.MgDeliveryVO" resultType="java.util.Map">
        select * from store_delivery where store_id = #{store_id}
    </select>
    <select id="getStoreDelivery" parameterType="com.webapp.manager.vo.MgDeliveryVO" resultType="java.util.Map">
        select * from store_delivery where store_id = (select product_store_id from product where product_cd = #{product_cd})
    </select>
    <select id="getCartStoreHopeInfo" parameterType="com.webapp.mall.vo.CartPaymentVO" resultType="java.util.Map">
        select if(sum(if(A.product_delivery_hope_date_yn = 'Y',1,0)) > 0,'Y','N') product_delivery_hope_date_yn,
				if(sum(if(A.product_delivery_hope_time_yn = 'Y',1,0)) > 0,'Y','N') product_delivery_hope_time_yn
		from store_delivery A where store_id IN (select product_store_id from product WHERE product_cd IN (select product_cd from product_cart WHERE cart_cd IN
		<foreach collection="chk" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
		))
    </select>
  <select id="getProductCodeList" parameterType="com.webapp.manager.vo.MgProductCodeVO" resultType="java.util.Map">
    select
    *,(select code_name from code where code.code='product_class_code' and code_value=product_class_code.product_class_code_type) product_class_code_type_name
    from product_class_code where 1=1
    <if test="product_class_code_type != null and product_class_code_type !=''"> and product_class_code_type =#{product_class_code_type}</if>
    <if test="product_class_name != null and product_class_name !=''"> and product_class_name =#{product_class_name}</if>
    order by reg_date desc
  </select>
  <select id="getSupplierList" parameterType="hashmap" resultType="hashmap">
    SELECT A.supplier_cd AS product_class_code,
			CONCAT(A.store_name,'(ID:',A.store_id,')') AS product_class_name,
			'공급사' AS product_class_code_type_name
	FROM store A
	ORDER BY A.reg_date desc
  </select>
  <select id="getNormalUserList" resultType="java.util.Map">
    select
    *
    from user
    where level = 1
    order by reg_date desc
  </select>
  <select id="getDeliveryAreaList" parameterType="hashmap" resultType="java.util.Map">
    select *
    from store_delivery_area A 
    where 1=1
    and store_id = #{store_id}
    order by A.reg_date desc 
	LIMIT ${rowStart-1}, ${displayRowCount}
  </select>
  <select id="getDeliveryAreaListCount" parameterType="hashmap" resultType="Integer">
    select ifnull(count(*),0) cnt
    from store_delivery_area A 
    where 1=1
    and store_id = #{store_id}
  </select>
  <select id="getAdditionalDeliveryPayment" parameterType="hashmap" resultType="Integer">
  	SELECT A.additional_delivery_payment
	FROM store_delivery_area A
	WHERE postcode = #{postcode}
	AND A.store_id = (SELECT product_store_id FROM product WHERE product_cd = #{product_cd})
	AND (SELECT Z.product_delivery_area_yn FROM store_delivery Z WHERE Z.store_id = (SELECT product_store_id FROM product WHERE product_cd = #{product_cd})) = 'Y'
  </select>
  <insert id="insertProductCode" parameterType="com.webapp.manager.vo.MgProductCodeVO">
    insert into product_class_code
    (
      product_class_code_type,
      product_class_code,
      product_class_name,
      product_class_use_yn
    )values(
      #{product_class_code_type},
      #{product_class_code},
      #{product_class_name},
      #{product_class_use_yn}
    )
    on duplicate KEY update
    product_class_code_type=#{product_class_code_type},
    product_class_code=#{product_class_code},
    product_class_name=#{product_class_name},
    product_class_use_yn=#{product_class_use_yn}

  </insert>
  <delete id="deleteProductCode" parameterType="com.webapp.manager.vo.MgProductCodeVO">
    delete from product_class_code
    where product_class_code_type=#{product_class_code_type}
    and product_class_code=#{product_class_code}
  </delete>
  <update id="updateDeliveryArea" parameterType="hashmap">
  	UPDATE store_delivery SET
  		product_delivery_area_yn = #{product_delivery_area_yn}
  	WHERE store_id = #{store_id}
  </update>
  <update id="insertDeliveryArea" parameterType="hashmap">
  	INSERT INTO store_delivery_area(
  		store_id,
  		area_name,
  		postcode,
  		additional_delivery_payment
  	)values(
  		#{store_id},
  		#{area_name},
  		#{postcode},
  		#{additional_delivery_payment}
  	)
  	on duplicate KEY update
    store_id=#{store_id},
	area_name=#{area_name},
	postcode=#{postcode},
	additional_delivery_payment=#{additional_delivery_payment}
  </update>
  <select id="getExcelSettingDetail" parameterType="hashmap" resultType="hashmap">
	  select *
	  from store_excel_setting
	  where store_id = #{store_id}
	  and type_value=#{type_value}
  </select>
  <insert id="insertExcelSetting" parameterType="hashmap">
  	insert into store_excel_setting(
  		store_id,
  		type_value,
  		type_name,
  		column_value,
  		column_name
  	)values(
  		#{store_id},
  		#{type_value},
  		#{type_name},
  		#{column_value},
  		#{column_name}
  	)
  	on duplicate key update
  	
	store_id = #{store_id},
	type_value = #{type_value},
	type_name = #{type_name},
	column_value = #{column_value},
	column_name = #{column_name}
  </insert>
  <select id="getStoreForId" resultType="hashmap" parameterType="hashmap">
  	select *
  	from store
  	where store_id = #{store_id}
  </select>
  <select id="getStoreProductDefinition" resultType="hashmap" parameterType="hashmap">
  	select *
  	from product_definition
  	where store_id = #{store_id}
  	and product_ct = #{product_ct}
  </select>
  <select id="getStoreProductList" parameterType="hashmap" resultType="hashmap">
  	SELECT A.product_cd, A.product_name, A.product_payment
	FROM product A
	<if test='store_id != "admin"'>WHERE A.product_store_id = #{store_id}</if>
	order by reg_date desc
  </select>
  <select id="getStoreList" parameterType="hashmap" resultType="hashmap">
  /*getStoreList*/
  	SELECT A.store_id, A.store_name
	FROM store A
	<if test="store_creator_yn != null and store_creator_yn != ''">WHERE A.store_creator_yn = #{store_creator_yn}</if>
	ORDER BY A.reg_date desc
  </select>
</mapper>
