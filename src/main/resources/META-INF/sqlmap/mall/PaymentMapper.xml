<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="mall.PaymentMapper">
	<select id="getUserPaymentStatusCount" parameterType="hashmap" resultType="hashmap">
		SELECT ifnull(sum(A.payment_status = 'M'),0) as mCnt,
				 ifnull(sum(A.payment_status = 'W'),0) as wCnt,
				 ifnull(sum(A.payment_status IN ('I')),0) as iCnt,
				 ifnull(sum(A.payment_status = 'R'),0) as rCnt,
				 ifnull(sum(A.payment_status = 'O'),0) as oCnt
		FROM payment_bundle A
		left join payment B
		on A.order_no = B.order_no
		WHERE B.payment_user_id = #{payment_user_id}
		and A.order_no NOT LIKE 'GW%'
		and A.payment_status != 'N'
	</select>
	
    <insert id="insertPayment" parameterType="java.util.Map">
        insert into payment(
        success,
        product_order_name,
        imp_uid,
        payment_user_id,
        merchant_uid,
        pay_method,
        pg_provider,
        pg_type,
        error_msg,
        payment_cd,
        order_no,
        product_cd,
        giveaway_cd,
        payment,
        payment_type_cd,
        payment_status,
        customs_clearance_number,
        password,
        delivery_hope_date,
        delivery_hope_time,
        payment_order_quantity,
        reg_no
        )values (
         #{success},
         #{product_order_name},
         #{imp_uid},
         #{payment_user_id},
         #{merchant_uid},
         #{pay_method},
         #{pg_provider},
         #{pg_type},
         #{error_msg},
        #{payment_cd},
        #{order_no},
        #{product_cd},
        #{giveaway_cd},
        #{payment},
        #{payment_type_cd},
        #{payment_status},
        #{customs_clearance_number},
        #{password},
        #{hope_date},
        #{hope_time},
        #{payment_order_quantity},
        #{reg_no}
        )
    </insert>

    <insert id="paymentOrders" parameterType="hashmap">
        insert into payment_bundle(
        product_cd,
        payment_cd,
        order_no,
        cart_cd,
        payment_type_cd,
        payment_order_quantity
        )values (
        #{product_cd},
        #{payment_cd},
        #{order_no},
        #{cart_cd},
        #{payment_type_cd},
        #{payment_order_quantity}
        )
    </insert>
    <insert id="insertBundle" parameterType="hashmap">
        insert into payment_bundle(
	        product_cd,
	        payment_cd,
	        order_no,
	        cart_cd,
	        payment_type_cd,
	        payment_order_quantity,
	        coupon_cd,
	        option_name,
	        coupon_discount,
	        payment_status
        )values (
	        #{product_cd},
	        #{payment_cd},
	        #{order_no},
	        #{cart_cd},
	        #{payment_type_cd},
	        #{payment_order_quantity},
        	#{coupon_cd},
        	#{option_name},
        	#{coupon_discount},
        	#{payment_status}
        )
    </insert>



    <update id="updateGiveawayDeliveryStatus" parameterType="java.util.Map">
        update giveaway_play_history set giveaway_payment_status = #{giveaway_payment_status} where giveaway_play_cd=#{giveaway_play_cd}
    </update>

	<select id="getUserPaymentBundleListCount" parameterType="hashmap" resultType="int">
		SELECT count(*) as cnt
		FROM payment_bundle A
		LEFT JOIN payment B
		ON A.order_no = B.order_no
		LEFT JOIN delivery_info C
		ON B.order_no = C.order_no
		LEFT JOIN product D
		ON A.product_cd = D.product_cd
		LEFT JOIN store E
		ON D.product_store_id = E.store_id
		where 1=1
        and B.order_no NOT LIKE 'GW%'
		and B.payment_status != 'N'
		and A.payment_status != 'N'
		<if test="payment_status != null and payment_status !=''"><![CDATA[AND A.payment_status = #{payment_status} ]]></if>
        <if test="start_date != null and start_date !=''"><![CDATA[AND A.reg_date >= date_format(#{start_date},'%y-%m-%d 00:00:00') ]]></if>
        <if test="end_date != null and end_date !=''"><![CDATA[AND A.reg_date <= date_format(date_add(#{end_date},interval 1 day),'%y-%m-%d 00:00:00') ]]></if>
        <if test="payment_user_id != null"> <![CDATA[AND B.payment_user_id= #{payment_user_id} ]]></if>
	</select>
	
	
	<select id="getCalculateCompanyCount" parameterType="com.webapp.manager.vo.CalculateCompanyVO" resultType="int">
		/*getCalculateCompanyCount*/
		  SELECT count(*)
		FROM payment_bundle d LEFT JOIN payment B ON d.order_no = B.order_no
		 LEFT JOIN delivery_info C ON B.order_no = C.order_no
		  LEFT JOIN product D ON d.product_cd = D.product_cd 
		 LEFT JOIN store E ON D.product_store_id = E.store_id where 
		1=1 
		and B.order_no 
		NOT LIKE 'GW%' 
		and B.payment_status != 'N' 
		and d.payment_status != 'N'
		 AND d.payment_status = 'O' 
	<if test="searchKeyword!=null and searchKeyword!='' and searchType!=''">
      <foreach item="item" index="index" collection="searchTypeArr" separator=" OR " open="AND (" close=")">
        ${item} LIKE CONCAT('%', #{searchKeyword},'%' )
      </foreach>
    </if> 
       <if test="store_pur_com !=null  and store_pur_com !=''">
	       <foreach item="item" index="index" collection="store_pur_com_arr" separator=" OR " open="AND (" close=")">
      		 E.store_pur_com = #{item}
      		</foreach>
        </if>
      	<if test="coupon_cd !=null  and coupon_cd !=''">
	       <foreach item="item" index="index" collection="coupon_cd_arr"  open="AND (" close=")">
      			d.coupon_cd  ${item}
      		</foreach>
        </if>
	 <if test="level == 9"> 
		and D.product_store_id = #{product_store_id}
	 </if> 
		
	</select>
	<select id="getCalculateCompanyList" parameterType="com.webapp.manager.vo.CalculateCompanyVO" resultType="hashmap">
		/*getCalculateCompanyList*/
  SELECT 
		c.level,
			d.payment_cd, 
			d.order_no, 
			b.product_store_id, 
			b.product_cd , 
			(SELECT a.code_name FROM code a WHERE a.code='store_pur_com' AND a.code_value= c.store_pur_com ) AS store_pur_com,
			(SELECT LEFT(b.product_tex_class,1) FROM code a WHERE a.code='product_tex_class' AND a.code_value= left(b.product_tex_class,1) ) AS product_tex_class,
			b.product_delivery_payment , 
			b.product_company_payment,
			a.payment_order_quantity ,
			b.product_type,
			b.product_name,
			b.reg_date, 
			d.coupon_cd,
		 	CASE WHEN d.coupon_cd IS not null AND d.coupon_cd!=''
				THEN '사용' ELSE '사용안함' END AS coupon_use,
			 ((b.product_company_payment* a.payment_order_quantity)+ b.product_delivery_payment ) AS totalSum 
		FROM payment_bundle d  LEFT JOIN payment a ON d.order_no =a.order_no 
		 LEFT JOIN delivery_info e ON a.order_no = e.order_no
		 LEFT JOIN product b ON b.product_cd=d.product_cd 
		 LEFT JOIN store c ON  b.product_store_id  =c.store_id 
		 WHERE 1=1
		and d.payment_status='O'
		AND a.payment_status != 'N' 
		AND d.payment_status != 'N' 
		AND a.order_no NOT LIKE 'GW%'
		<if test="searchKeyword!=null and searchKeyword!='' and searchType!=''">
	      <foreach item="item" index="index" collection="searchTypeArr" separator=" OR " open="AND (" close=")">
	        ${item} LIKE CONCAT('%', #{searchKeyword},'%' )
	      </foreach>
	    </if> 
	     <if test="store_pur_com !=null  and store_pur_com !=''">
	       <foreach item="item" index="index" collection="store_pur_com_arr" separator=" OR " open="AND (" close=")">
      		 c.store_pur_com = #{item}
      		</foreach>
        </if>
      	<if test="coupon_cd !=null  and coupon_cd !=''">
	       <foreach item="item" index="index" collection="coupon_cd_arr" open="AND (" close=")">
     	 	d.coupon_cd  ${item}
      		</foreach>
        </if>

		 <if test="level == 9"> 
		 	and b.product_store_id = #{product_store_id}
		 </if>
  	   <![CDATA[
  		  order by b.reg_date desc
  		 LIMIT ${rowStart-1}, ${displayRowCount} 
  ]]>
    	 
	</select>
	<select id="getCalculateCompanyListDetail" parameterType="hashmap" resultType="hashmap">
	
		/*getCalculateCompanyListDetail*/	
		SELECT 
			c.level  ,
			d.no,
			aa.tax_type,
			aa.taxinvoice_status, 
			(SELECT a.code_name FROM 
				code a WHERE a.code='taxinvoice_status' AND a.code_value= aa.taxinvoice_status ) AS taxinvoice_status_name,
			a.imp_uid,
			a.payment_cd,
			a.order_no,
			b.product_store_id,
			b.product_cd ,
			(SELECT LEFT(b.product_tex_class,1) FROM code a WHERE a.code='product_tex_class' AND a.code_value= left(b.product_tex_class,1) ) AS product_tex_class,
			(SELECT a.code_name FROM code a WHERE a.code='store_pur_com' AND a.code_value= c.store_pur_com ) AS store_pur_com,
			b.product_delivery_payment ,
			b.product_company_payment,
			a.payment_order_quantity ,
		    b.product_name,
		    c.level,
		    d.coupon_cd,
		 	CASE WHEN d.coupon_cd IS not null AND d.coupon_cd!=''
				THEN '사용' ELSE '사용안함' END AS coupon_use,
			(select Z.code_name from code Z where Z.code='product_type' and Z.code_value = b.product_type)AS product_type,
		   a.coupon_discount,
			((b.product_company_payment* a.payment_order_quantity)+ b.product_delivery_payment ) AS totalSum
		FROM payment a LEFT JOIN product b ON b.product_cd=a.product_cd 
		LEFT JOIN store c ON c.store_id = b.product_store_id
		LEFT JOIN payment_bundle d ON a.product_cd =d.product_cd
		LEFT JOIN taxinvoice_store_history aa ON aa.order_no = a.order_no
		WHERE a.order_no =#{order_no}
		GROUP BY a.order_no
	</select>
		<select id="getCalculateApplyCompanyList" parameterType="com.webapp.manager.vo.CalculateCompanyVO" resultType="hashmap">
					/*getCalculateApplyCompanyList*/
					SELECT 
					c.level
					,(SELECT a.code_name 
					FROM code a WHERE a.code='taxinvoice_status' AND a.code_value= f.taxinvoice_status ) AS taxinvoice_status_name
					, d.payment_cd
					, d.order_no
					, f.tax_type
					, b.product_store_id, b.product_cd 
					, (SELECT a.code_name FROM code a WHERE a.code='store_pur_com' AND a.code_value= c.store_pur_com ) AS store_pur_com
					, (SELECT LEFT(b.product_tex_class,1) FROM code a WHERE a.code='product_tex_class' AND a.code_value= left(b.product_tex_class,1) ) AS product_tex_class
					, b.product_delivery_payment 
					, b.product_company_payment
					, a.payment_order_quantity 
					, b.product_type
					, b.product_name
					, b.reg_date 
					, d.coupon_cd
					, CASE WHEN d.coupon_cd IS null THEN '사용안함' ELSE '사용' END AS coupon_use
					, ((b.product_company_payment* a.payment_order_quantity)+ b.product_delivery_payment ) AS totalSum
				 FROM payment_bundle d LEFT JOIN payment a ON d.order_no =a.order_no 
				LEFT JOIN delivery_info e ON a.order_no = e.order_no 
				LEFT JOIN product b ON b.product_cd=d.product_cd 
				LEFT JOIN store c ON c.store_id = b.product_store_id 
				LEFT JOIN taxinvoice_store_history f ON d.no = f.no
				WHERE 1=1 
				AND a.payment_status ='O' 
				and d.payment_status='O' 
				AND a.payment_status != 'N'
				AND a.order_no NOT LIKE 'GW%' 
			 AND f.taxinvoice_status IS NOT null
				<if test="searchKeyword!=null and searchKeyword!='' and searchType!=''">
			      <foreach item="item" index="index" collection="searchTypeArr" separator=" OR " open="AND (" close=")">
			        ${item} LIKE CONCAT('%', #{searchKeyword},'%' )
			      </foreach>
			    </if> 
			     <if test="level == 9"> 
		 		and b.product_store_id = #{product_store_id}
				 </if>
					 order by b.reg_date desc LIMIT 0, 10 
	
			</select>
			<select id="getCalculateApplyCompanyCount" parameterType="com.webapp.manager.vo.CalculateCompanyVO" resultType="int">
			/*getCalculateCompanyCount*/
			  SELECT count(*)
			FROM payment_bundle A LEFT JOIN payment B ON A.order_no = B.order_no
			 LEFT JOIN delivery_info C ON B.order_no = C.order_no LEFT JOIN product D ON A.product_cd = D.product_cd
			  LEFT JOIN store E ON D.product_store_id = E.store_id  
			  LEFT JOIN taxinvoice_store_history F ON A.no = F.no
			  where
			1=1 
			and B.order_no 
			NOT LIKE 'GW%' 
			and B.payment_status != 'N' 
			and A.payment_status != 'N'
			 AND A.payment_status = 'O'
			AND F.taxinvoice_status IS NOT null
		<if test="searchKeyword!=null and searchKeyword!='' and searchType!=''">
	      <foreach item="item" index="index" collection="searchTypeArr" separator=" OR " open="AND (" close=")">
	        ${item} LIKE CONCAT('%', #{searchKeyword},'%' )
	      </foreach>
	    </if> 
	    </select>

	<select id="getUserPaymentBundleList" parameterType="hashmap" resultType="hashmap">
		SELECT A.*,B.*,C.*,D.*,E.*,
			(select Z.username from user Z where Z.usr_id=B.payment_user_id) as username,
		   (SELECT Z.email from user Z where Z.usr_id=B.payment_user_id) as email,
		   (select Z.review_id from product_review Z where Z.order_no = A.no) as review_id,
		   (SELECT Z.store_name FROM store Z where Z.supplier_cd = D.product_supplier) as product_made_company_name,
		   (select Z.code_name from code Z where Z.code='payment_status' and Z.code_value = A.payment_status) as payment_status_name,
		   (select D.order_user_email from delivery_info D where A.order_no = D.order_no) as order_user_email,
		   (select D.order_user_name from delivery_info D where A.order_no = D.order_no) as order_user_name,
		   (select D.delivery_user_name from delivery_info D where A.order_no = D.order_no) as delivery_user_name,
		   (select Z.file_link from product_file Z where Z.key_id = D.product_cd and Z.file_order = 1) as file_1
		FROM payment_bundle A
		LEFT JOIN payment B
		ON A.order_no = B.order_no
		LEFT JOIN delivery_info C
		ON B.order_no = C.order_no
		LEFT JOIN product D
		ON A.product_cd = D.product_cd
		LEFT JOIN store E
		ON D.product_store_id = E.store_id
		where 1=1
        and B.order_no NOT LIKE 'GW%'
		and B.payment_status != 'N'
		and A.payment_status != 'N'
		<if test="payment_status != null and payment_status !=''"><![CDATA[AND A.payment_status = #{payment_status} ]]></if>
        <if test="start_date != null and start_date !=''"><![CDATA[AND A.reg_date >= date_format(#{start_date},'%y-%m-%d 00:00:00') ]]></if>
        <if test="end_date != null and end_date !=''"><![CDATA[AND A.reg_date <= date_format(date_add(#{end_date},interval 1 day),'%y-%m-%d 00:00:00') ]]></if>
        <if test="payment_user_id != null"> <![CDATA[AND B.payment_user_id= #{payment_user_id} ]]></if>
        <![CDATA[ order by A.reg_date desc LIMIT ${rowStart-1}, ${staticRowEnd} ]]>
	</select>
	<select id="getMgPaymentBundleListCount" resultType="int" parameterType="hashmap">
		SELECT count(*) as cnt
		FROM payment_bundle A
		LEFT JOIN payment B
		ON A.order_no = B.order_no
		LEFT JOIN delivery_info C
		ON B.order_no = C.order_no
		LEFT JOIN product D
		ON A.product_cd = D.product_cd
		LEFT JOIN store E
		ON D.product_store_id = E.store_id
		where 1=1
        and B.order_no NOT LIKE 'GW%'
		and B.payment_status != 'N'
		and A.payment_status != 'N'
		<if test="searchKeyword!=null and searchKeyword!='' and searchType!=''">
	      <foreach item="item" index="index" collection="searchTypeArr" separator=" OR " open="AND (" close=")">
		  	<if test='item == "product_name"'>
		      	(D.product_name like concat('%',#{searchKeyword},'%') or A.option_name like concat('%',#{searchKeyword},'%')) 
		    </if>
		    <if test='item != "product_name"'>
		        ${item} LIKE CONCAT('%', #{searchKeyword},'%' )
	        </if>
	      </foreach>
	    </if>
        <if test="payment_status != null and payment_status !=''"><![CDATA[AND A.payment_status = #{payment_status} ]]></if>
        <if test="start_date != null and start_date !=''"><![CDATA[AND A.reg_date >= date_format(#{start_date},'%y-%m-%d 00:00:00') ]]></if>
        <if test="end_date != null and end_date !=''"><![CDATA[AND A.reg_date <= date_format(date_add(#{end_date},interval 1 day),'%y-%m-%d 00:00:00') ]]></if>
        <if test="deli_start_date != null and deli_start_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) >= date_format(#{deli_start_date},'%y-%m-%d 00:00:00') ]]></if>
        <if test="deli_end_date != null and deli_end_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) <= date_format(date_add(#{deli_end_date},interval 1 day),'%y-%m-%d 00:00:00') ]]></if>
        <if test="merchant_uid != null"> <![CDATA[AND A.merchant_uid= #{merchant_uid} ]]></if>
        <if test="payment_user_id != null"> <![CDATA[AND A.payment_user_id= #{payment_user_id} ]]></if>
        <if test="order_no != null"> <![CDATA[AND A.order_no= #{order_no} ]]></if>
	</select>
	<select id="getMgPaymentBundleList" resultType="hashmap" parameterType="hashmap">
		SELECT A.*,B.*,C.*,D.*,E.*,
			(select Z.username from user Z where Z.usr_id=B.payment_user_id) as username,
		   (SELECT Z.email from user Z where Z.usr_id=B.payment_user_id) as email,
		   (SELECT Z.store_name FROM store Z where Z.supplier_cd = D.product_supplier) as product_made_company_name,
		   (select Z.code_name from code Z where Z.code='payment_status' and Z.code_value = A.payment_status) as payment_status_name,
		   (select D.order_user_email from delivery_info D where A.order_no = D.order_no) as order_user_email,
		   (select D.order_user_name from delivery_info D where A.order_no = D.order_no) as order_user_name,
		   (select D.delivery_user_name from delivery_info D where A.order_no = D.order_no) as delivery_user_name,
		   (SELECT Z.file_link FROM product_file Z WHERE Z.key_id = B.product_cd AND Z.file_order = 1) AS file_1
		FROM payment_bundle A
		LEFT JOIN payment B
		ON A.order_no = B.order_no
		LEFT JOIN delivery_info C
		ON B.order_no = C.order_no
		LEFT JOIN product D
		ON A.product_cd = D.product_cd
		LEFT JOIN store E
		ON D.product_store_id = E.store_id
		where 1=1
        and B.order_no NOT LIKE 'GW%'
		and B.payment_status != 'N'
		and A.payment_status != 'N'
		<if test="searchKeyword!=null and searchKeyword!='' and searchType!=''">
	      <foreach item="item" index="index" collection="searchTypeArr" separator=" OR " open="AND (" close=")">
		  	<if test='item == "product_name"'>
		      	(D.product_name like concat('%',#{searchKeyword},'%') or A.option_name like concat('%',#{searchKeyword},'%')) 
		    </if>
		    <if test='item != "product_name"'>
		        ${item} LIKE CONCAT('%', #{searchKeyword},'%' )
	        </if>
	      </foreach>
	    </if>
        <if test="payment_status != null and payment_status !=''"><![CDATA[AND A.payment_status = #{payment_status} ]]></if>
        <if test="start_date != null and start_date !=''"><![CDATA[AND A.reg_date >= date_format(#{start_date},'%y-%m-%d 00:00:00') ]]></if>
        <if test="end_date != null and end_date !=''"><![CDATA[AND A.reg_date <= date_format(date_add(#{end_date},interval 1 day),'%y-%m-%d 00:00:00') ]]></if>
        <if test="deli_start_date != null and deli_start_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) >= date_format(#{deli_start_date},'%y-%m-%d 00:00:00') ]]></if>
        <if test="deli_end_date != null and deli_end_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) <= date_format(date_add(#{deli_end_date},interval 1 day),'%y-%m-%d 00:00:00') ]]></if>
        <if test="merchant_uid != null"> <![CDATA[AND A.merchant_uid= #{merchant_uid} ]]></if>
        <if test="payment_user_id != null"> <![CDATA[AND A.payment_user_id= #{payment_user_id} ]]></if>
        <if test="order_no != null"> <![CDATA[AND A.order_no= #{order_no} ]]></if>
    	<![CDATA[ order by A.reg_date desc LIMIT ${rowStart-1}, ${staticRowEnd} ]]>
	</select>
	<select id="getMgPaymentBundleDetail" resultType="hashmap" parameterType="hashmap">
		SELECT A.*,B.*,C.*,D.*,E.*,
			(select Z.username from user Z where Z.usr_id=B.payment_user_id) as username,
		   (SELECT Z.email from user Z where Z.usr_id=B.payment_user_id) as email,
		   (SELECT Z.store_name FROM store Z where Z.supplier_cd = D.product_supplier) as product_made_company_name,
		   (select Z.code_name from code Z where Z.code='payment_status' and Z.code_value = B.payment_status) as payment_status_name,
		   (select D.order_user_email from delivery_info D where A.order_no = D.order_no) as order_user_email,
		   (select D.order_user_name from delivery_info D where A.order_no = D.order_no) as order_user_name,
		   (select D.delivery_user_name from delivery_info D where A.order_no = D.order_no) as delivery_user_name,
		   (SELECT Z.file_link FROM product_file Z WHERE Z.key_id = B.product_cd AND Z.file_order = 1) AS file_1
		FROM payment_bundle A
		LEFT JOIN payment B
		ON A.order_no = B.order_no
		LEFT JOIN delivery_info C
		ON B.order_no = C.order_no
		LEFT JOIN product D
		ON A.product_cd = D.product_cd
		LEFT JOIN store E
		ON D.product_store_id = E.store_id
		where 1=1
        and B.order_no NOT LIKE 'GW%'
		and B.payment_status != 'N'
		and A.payment_status != 'N'
		and A.no = #{order_no}
	</select>
    <select id="getPaymentList" resultType="java.util.HashMap">
    <![CDATA[
        SELECT
        	IF(A.product_order_name is not null,A.product_order_name,B.product_name) as product_name,
            A.*,B.*,C.*,D.*,
            (select Z.username from user Z where Z.usr_id=A.payment_user_id) as username,
            (select Z.email from user Z where Z.usr_id=A.payment_user_id) as email,
            (SELECT Z.store_name FROM store Z where Z.supplier_cd = B.product_supplier) as product_made_company_name,
            (select Z.code_name from code Z where Z.code='payment_status' and Z.code_value = A.payment_status) as payment_status_name,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 1) as file_1,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 2) as file_2,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 3) as file_3,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 4) as file_4,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 5) as file_5,
            (select Z.file_link from product_file Z where Z.key_id = C.giveaway_cd and Z.file_order = 1) as file_6,
            (select Z.review_id from product_review Z where Z.order_no = A.order_no) as review_id,
            (select D.order_user_email from delivery_info D where A.order_no = D.order_no) as order_user_email,
            (select D.order_user_name from delivery_info D where A.order_no = D.order_no) as order_user_name,
            (select D.delivery_user_name from delivery_info D where A.order_no = D.order_no) as delivery_user_name
        FROM payment A left join product B on (B.product_cd = A.product_cd)
        left join giveaway C on (C.giveaway_cd = A.giveaway_cd)
        LEFT JOIN delivery_info D ON(A.order_no = D.order_no)
        LEFT JOIN store E ON(B.product_store_id = E.store_id)
        where 1=1
        and A.order_no NOT LIKE 'GW%'
and A.payment_status != 'N'
        ]]>
        <if test="searchKeyword!=null and searchKeyword!='' and searchType!=''">
	      <foreach item="item" index="index" collection="searchTypeArr" separator=" OR " open="AND (" close=")">
		  	<if test='item == "product_name"'>
		      	IF(A.product_order_name is not null,A.product_order_name,B.product_name) LIKE CONCAT('%', #{searchKeyword},'%' ) 
		    </if>
		    <if test='item != "product_name"'>
		        ${item} LIKE CONCAT('%', #{searchKeyword},'%' )
	        </if>
	      </foreach>
	    </if>
        <if test="payment_status != null and payment_status !=''"><![CDATA[AND A.payment_status = #{payment_status} ]]></if>
        <if test="start_date != null and start_date !=''"><![CDATA[AND A.reg_date >= date_format(#{start_date},'%y-%m-%d 00:00:00') ]]></if>
        <if test="end_date != null and end_date !=''"><![CDATA[AND A.reg_date <= date_format(date_add(#{end_date},interval 1 day),'%y-%m-%d 00:00:00') ]]></if>
        <if test="delivery_start_date != null and delivery_start_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) >= date_format(#{delivery_start_date},'%y-%m-%d 00:00:00') ]]></if>
        <if test="delivery_end_date != null and delivery_end_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) <= date_format(date_add(#{delivery_start_date},interval 1 day),'%y-%m-%d 00:00:00') ]]></if>
        <if test="merchant_uid != null"> <![CDATA[AND A.merchant_uid= #{merchant_uid} ]]></if>
        <if test="payment_user_id != null"> <![CDATA[AND A.payment_user_id= #{payment_user_id} ]]></if>
        <if test="order_no != null"> <![CDATA[AND A.order_no= #{order_no} ]]></if>
    <![CDATA[ order by A.reg_date desc LIMIT ${rowStart-1}, ${staticRowEnd} ]]>
    </select>
    <select id="getPaymentListChk" resultType="java.util.HashMap">
        <![CDATA[
        SELECT
          A.*
        FROM payment A where imp_uid=#{imp_uid} AND password = #{password}
        ]]>
    </select>
    <select id="getPaymentListCount" parameterType="java.util.Map" resultType="Integer">
        <![CDATA[
        SELECT
            count(*) as cnt
        FROM payment A left join product B on (B.product_cd = A.product_cd)
        left join giveaway C on (C.giveaway_cd = A.giveaway_cd)
        LEFT JOIN delivery_info D ON(A.order_no = D.order_no)
        LEFT JOIN store E ON(B.product_store_id = E.store_id)
        where 1=1
        and A.order_no NOT LIKE 'GW%'
and A.payment_status != 'N'
        ]]>
        <if test="searchKeyword!=null and searchKeyword!='' and searchType!=''">
	      <foreach item="item" index="index" collection="searchTypeArr" separator=" OR " open="AND (" close=")">
		  	<if test='item == "product_name"'>
		      	IF(A.product_order_name is not null,A.product_order_name,B.product_name) LIKE CONCAT('%', #{searchKeyword},'%' ) 
		    </if>
		    <if test='item != "product_name"'>
		        ${item} LIKE CONCAT('%', #{searchKeyword},'%' )
	        </if>
	      </foreach>
	    </if>
        <if test="payment_status != null and payment_status !=''"><![CDATA[AND A.payment_status = #{payment_status} ]]></if>
        <if test="start_date != null and start_date !=''"><![CDATA[AND A.reg_date >= date_format(#{start_date},'%y-%m-%d 00:00:00') ]]></if>
        <if test="end_date != null and end_date !=''"><![CDATA[AND A.reg_date <= date_format(date_add(#{end_date},interval 1 day),'%y-%m-%d 00:00:00') ]]></if>
        <if test="delivery_start_date != null and delivery_start_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) >= date_format(#{delivery_start_date},'%y-%m-%d 00:00:00') ]]></if>
        <if test="delivery_end_date != null and delivery_end_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) <= date_format(date_add(#{delivery_start_date},interval 1 day),'%y-%m-%d 00:00:00') ]]></if>
        <if test="merchant_uid != null"> <![CDATA[AND A.merchant_uid= #{merchant_uid} ]]></if>
        <if test="payment_user_id != null"> <![CDATA[AND A.payment_user_id= #{payment_user_id} ]]></if>
        <if test="order_no != null"> <![CDATA[AND A.order_no= #{order_no} ]]></if>
    </select>
    <select id="getPaymentDetail" resultType="java.util.HashMap" parameterType="java.util.Map" >
/*getPaymentDetail*/        
        <![CDATA[
        SELECT
            A.*,B.*,C.*,
            (select Z.username from user Z where Z.usr_id=A.payment_user_id) as username,
            (select Z.email from user Z where Z.usr_id=A.payment_user_id) as email,
            (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) as delivery_start_date,
            (select Z.delivery_t_code from delivery_info Z where Z.order_no=A.order_no) as delivery_t_code,
            (select Z.delivery_t_invoice from delivery_info Z where Z.order_no=A.order_no) as delivery_t_invoice,
            (select Z.delivery_status from delivery_info Z where Z.order_no=A.order_no) as delivery_status,
            (select Z.code_name from code Z where Z.code='payment_status' and Z.code_value = A.payment_status) as payment_status_name,
            (SELECT Z.store_name FROM store Z where Z.supplier_cd = B.product_supplier) as product_made_company_name,
            (select Z.code_name from code Z where Z.code = 'product_payment_type' AND Z.code_value = A.pay_method) as pay_method_name,
            (select D.order_user_email from delivery_info D where A.order_no = D.order_no) as order_user_email,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 1) as file_1,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 2) as file_2,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 3) as file_3,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 4) as file_4,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 5) as file_5,
            (select Z.file_link from product_file Z where Z.key_id = C.giveaway_cd and Z.file_order = 1) as file_6,
            (select D.order_user_name from delivery_info D where A.order_no = D.order_no) as order_user_name,
            (select D.delivery_user_name from delivery_info D where A.order_no = D.order_no) as delivery_user_name,
            (select D.postcode from delivery_info D where A.order_no = D.order_no) as postcode,
            (select D.roadAddress from delivery_info D where A.order_no = D.order_no) as roadAddress,
            (select D.extraAddress from delivery_info D where A.order_no = D.order_no) as extraAddress,
            (select D.delivery_user_phone from delivery_info D where A.order_no = D.order_no) as delivery_user_phone,
            (select D.delivery_user_tel from delivery_info D where A.order_no = D.order_no) as delivery_user_tel,
            (select D.delivery_message from delivery_info D where A.order_no = D.order_no) as delivery_message
            
        FROM payment A left join product B on (B.product_cd = A.product_cd) left join giveaway C on (C.giveaway_cd = A.giveaway_cd) where 1=1
        ]]>
        <if test="payment_user_id != null"> <![CDATA[AND A.payment_user_id= #{payment_user_id} ]]></if>
        <if test="merchant_uid != null"> <![CDATA[AND A.merchant_uid= #{merchant_uid} ]]></if>
        <if test="order_no != null"> <![CDATA[AND A.order_no= #{order_no} ]]></if>
        <if test="imp_uid != null">AND A.imp_uid=#{imp_uid}</if>
        <if test="password != null">AND A.password = #{password}</if>
    </select>
    <select id="getTodaySummary" resultType="java.util.HashMap" parameterType="java.util.Map" >
	    SELECT IFNULL(COUNT(*),0) orderCnt,
				IFNULL(COUNT(*),0) - IFNULL(SUM(A.payment_status IN ('C','G','M')),0) payCnt,
				IFNULL(SUM(A.payment_status ='C'),0) refundCnt,
				SUM(IFNULL(payment,0)) orderTotal, 
				SUM(IFNULL(A.payment,0))-SUM(IFNULL(IF(A.payment_status IN ('C','G','M'),A.payment,0),0)) payTotal, 
				SUM(IFNULL(IF(A.payment_status IN ('C','G'),A.payment,0),0)) refundTotal
		FROM payment A
		WHERE DATE_FORMAT(A.reg_date,'%Y%m%d') = DATE_FORMAT(SYSDATE(),'%Y%m%d')
		and A.order_no NOT LIKE 'GW%'
and A.payment_status != 'N'
    </select>
    <select id="getLastMonthSummary" resultType="java.util.HashMap" parameterType="java.util.Map" >
	    SELECT SUM(IF(A.payment_status = 'M',1,0)) mCnt,
				SUM(IF(A.payment_status IN ('D','I','W'),1,0)) dCnt,
				SUM(IF(A.payment_status = 'R',1,0)) rCnt,
				SUM(IF(A.payment_status = 'O',1,0)) oCnt,
				SUM(IF(A.payment_status = 'C',1,0)) cCnt,
				SUM(IF(A.payment_status IN ('F','S'),1,0)) sCnt,
				SUM(IF(A.payment_status = 'H',1,0)) hCnt,
				SUM(IF(A.payment_status = 'G',1,0)) gCnt
		FROM payment_bundle A
		WHERE A.reg_date BETWEEN DATE_ADD(SYSDATE(), INTERVAL -1 MONTH) AND SYSDATE()
		and A.order_no NOT LIKE 'GW%'
        and A.payment_status != 'N'
    </select>
    <select id="getStatusCount" resultType="java.util.HashMap" parameterType="java.util.Map" >
	    SELECT SUM(IF(A.payment_status = 'M',1,0)) mCnt,
				SUM(IF(A.payment_status = 'D',1,0)) dCnt,
				SUM(IF(A.payment_status = 'I',1,0)) iCnt,
				SUM(IF(A.payment_status = 'W',1,0)) wCnt,
				SUM(IF(A.payment_status = 'R',1,0)) rCnt,
				SUM(IF(A.payment_status = 'O',1,0)) oCnt,
				SUM(IF(A.payment_status = 'C',1,0)) cCnt,
				SUM(IF(A.payment_status = 'F',1,0)) fCnt,
				SUM(IF(A.payment_status = 'S',1,0)) sCnt,
				SUM(IF(A.payment_status = 'H',1,0)) hCnt,
				SUM(IF(A.payment_status = 'G',1,0)) gCnt
		FROM payment_bundle A
		WHERE 1=1
		and A.order_no NOT LIKE 'GW%'
        and A.payment_status != 'N'
		<if test="start_date != null and start_date !=''"><![CDATA[AND A.reg_date >= #{start_date} ]]></if>
        <if test="end_date != null and end_date !=''"><![CDATA[AND A.reg_date <= #{end_date} ]]></if>
    </select>
    <update id="updatePayment" parameterType="com.webapp.mall.vo.DeliveryInfoVO">
        update payment set
        payment_status = #{payment_status}
        where order_no=#{merchant_uid}
    </update>
    <update id="updatePaymentBundle" parameterType="com.webapp.mall.vo.DeliveryInfoVO">
        update payment_bundle set
        	payment_status = #{payment_status}
        where no=#{merchant_uid}
    </update>
    <update id="updatePaymentManger" parameterType="com.webapp.mall.vo.DeliveryInfoVO">
        update payment set
        payment_status = #{payment_status}
        where order_no=#{order_no}
    </update>
    <update id="updatePaymentBundleCancel" parameterType="com.webapp.mall.vo.DeliveryInfoVO">
        update payment_bundle set
        payment_status = #{payment_status}
        where order_no=#{order_no}
    </update>
    <update id="updatePaymentBundleManger" parameterType="com.webapp.mall.vo.DeliveryInfoVO">
        update payment_bundle set
        payment_status = #{payment_status},
        delivery_start_date = now(),
        delivery_t_invoice = #{delivery_t_invoice},
        delivery_t_code = #{delivery_t_code}
        where no=#{order_no}
    </update>
    <insert id="insertPaymentRefund" parameterType="com.webapp.mall.vo.DeliveryInfoVO">
        insert into payment_refund
        (
            merchant_uid,
            cancel_request_amount,
            reason,
            refund_holder,
            refund_bank,
            refund_account
        )values(
            #{merchant_uid},
            #{cancel_request_amount},
            #{reason},
            #{refund_holder},
            #{refund_bank},
            #{refund_account}
        )
    </insert>
    
    <select id="getPaymentBundleList" resultType="hashmap" parameterType="hashmap">
    	/*getPaymentBundleList*/
    	SELECT A.*, B.*,
			(SELECT Z.file_link FROM product_file Z WHERE Z.key_id = B.product_cd AND Z.file_order = 1) AS file_1,
			(SELECT Z.store_name FROM store Z where Z.supplier_cd = B.product_supplier) as product_made_company_name,
			(select Z.code_name from code Z where Z.code='payment_status' and Z.code_value = A.payment_status) as payment_status_name
		FROM payment_bundle A
		JOIN product B
		ON A.product_cd = B.product_cd
		WHERE A.order_no = #{order_no}
    </select>
    
    <insert id="insertTaxinvoiceHistory" parameterType="com.webapp.manager.vo.TaxVO">
       /*insertTaxinvoiceHistory
       */
        insert into taxinvoice_history(
			mgt_num,
			order_no,
			result_code
        )values(
            #{mgt_num},
			#{order_no},
			#{result_code}
        )
    </insert>
    
    
       <insert id="insertStoreTaxinvoiceHistory" parameterType="com.webapp.manager.vo.TaxVO">
       /*insertStoreTaxinvoiceHistory*/
             insert into taxinvoice_store_history(
           		no,
				order_no,
				result_code,
				reg_date,
				taxinvoice_applyDate,
				taxinvoice_status,
				tax_type,
				invoicee_party_type,
				kwon,
				ho,
				serial_num,
				corp_num,
				corp_name,
				ceo_name,
				addr,
				biz_type,
				biz_class,
				taxemail,
				remark1,
				purpose_type  )VALUES(
							        	#{no},
										#{order_no},
										#{result_code},
										SYSDATE(),
										SYSDATE(),
										'S',
										#{tax_type},
										#{invoicee_party_type},
										#{kwon},
										#{ho},
										#{serial_num},
										#{corp_num},
										#{corp_name},
										#{ceo_name},
										#{addr},
										#{biz_type},
										#{biz_class},
										#{taxemail},
										#{remark1},
										#{purpose_type}) 
										
									
    </insert>
    
    
    
     <update id="updateStoreTaxinvoiceHistory" parameterType="com.webapp.manager.vo.TaxVO">
            <![CDATA[
            update 
            taxinvoice_store_history set
            mgt_num =#{mgt_num}
            ,taxinvoice_status=#{taxinvoice_status}
            ,taxinvoice_approvalDate=SYSDATE()
            ,result_code=#{result_code}
            where order_no = #{order_no}
            ]]>
    </update>
    
     <select id="getStoreInvoiceList" resultType="java.util.HashMap">
 		/*getStoreInvoiceList*/
 		  SELECT * FROM taxinvoice_store_history
		where order_no =#{order_no}

    </select>
    
    
</mapper>
