<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="mall.PaymentMapper">
    <insert id="insertPayment" parameterType="java.util.Map">
        insert into payment(
        success,
        imp_uid,
        payment_user_id,
        merchant_uid,
        pay_method,
        pg_provider,
        pg_type,
        error_msg,
        payment_cd,
        order_no,
        product_cd,
        giveaway_cd,
        payment,
        payment_type_cd,
        payment_status,
        customs_clearance_number,
        password
        )values (
         #{success},
         #{imp_uid},
          #{payment_user_id},
         #{merchant_uid},
         #{pay_method},
         #{pg_provider},
         #{pg_type},
         #{error_msg},
        #{payment_cd},
        #{order_no},
        #{product_cd},
        #{giveaway_cd},
        #{payment},
        #{payment_type_cd},
        #{payment_status},
        #{customs_clearance_number},
        #{password}
        )
    </insert>

    <insert id="paymentOrders" parameterType="java.util.Map">

    </insert>



    <update id="updateGiveawayDeliveryStatus" parameterType="java.util.Map">
        update giveaway_play_history set giveaway_payment_status = #{giveaway_payment_status} where giveaway_play_cd=#{giveaway_play_cd}
    </update>

    <select id="getPaymentList" resultType="java.util.HashMap">
    <![CDATA[
        SELECT
            A.*,B.*,
            (select Z.username from user Z where Z.usr_id=A.payment_user_id) as username,
            (select Z.email from user Z where Z.usr_id=A.payment_user_id) as email,
            (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) as delivery_start_date,
            (select Z.delivery_t_code from delivery_info Z where Z.order_no=A.order_no) as delivery_t_code,
            (select Z.delivery_t_invoice from delivery_info Z where Z.order_no=A.order_no) as delivery_t_invoice,
            (select Z.product_made_company_name from product_made_company Z where Z.product_made_company_cd=B.product_made_company_cd) as product_made_company_name,
            (select Z.code_name from code Z where Z.code='payment_status' and Z.code_value = A.payment_status) as payment_status_name,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 1) as file_1,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 2) as file_2,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 3) as file_3,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 4) as file_4,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 5) as file_5,
            (select Z.review_id from product_review Z where Z.order_no = A.order_no) as review_id
        FROM payment A left join product B on (B.product_cd = A.product_cd) where 1=1
        ]]>
        <if test="payment_status != null and payment_status !=''"><![CDATA[AND A.payment_status = #{payment_status} ]]></if>
        <if test="start_date != null and start_date !=''"><![CDATA[AND A.reg_date >= #{start_date} ]]></if>
        <if test="end_date != null and end_date !=''"><![CDATA[AND A.reg_date <= #{end_date} ]]></if>
        <if test="delivery_start_date != null and delivery_start_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) >= #{delivery_start_date} ]]></if>
        <if test="delivery_end_date != null and delivery_end_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) <= #{delivery_end_date} ]]></if>
        <if test="merchant_uid != null"> <![CDATA[AND A.merchant_uid= #{merchant_uid} ]]></if>
        <if test="payment_user_id != null"> <![CDATA[AND A.payment_user_id= #{payment_user_id} ]]></if>
        <if test="order_no != null"> <![CDATA[AND A.order_no= #{order_no} ]]></if>
    <![CDATA[ order by A.reg_date desc LIMIT ${rowStart-1}, ${staticRowEnd} ]]>
    </select>
    <select id="getPaymentListCount" parameterType="java.util.Map" resultType="Integer">
        <![CDATA[
        SELECT
            count(*) as cnt
        FROM payment A  where 1=1
        ]]>
        <if test="payment_status != null and payment_status !=''"><![CDATA[AND A.payment_status = #{payment_status} ]]></if>
        <if test="start_date != null and start_date !=''"><![CDATA[AND A.reg_date >= #{start_date} ]]></if>
        <if test="end_date != null and end_date !=''"><![CDATA[AND A.reg_date <= #{end_date} ]]></if>
        <if test="delivery_start_date != null and delivery_start_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) >= #{delivery_start_date} ]]></if>
        <if test="delivery_end_date != null and delivery_end_date !=''"><![CDATA[AND (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) <= #{delivery_end_date} ]]></if>
        <if test="merchant_uid != null"> <![CDATA[AND A.merchant_uid= #{merchant_uid} ]]></if>
        <if test="payment_user_id != null"> <![CDATA[AND A.payment_user_id= #{payment_user_id} ]]></if>
        <if test="order_no != null"> <![CDATA[AND A.order_no= #{order_no} ]]></if>
    </select>
    <select id="getPaymentDetail" resultType="java.util.HashMap" parameterType="java.util.Map" >
        <![CDATA[
        SELECT
            A.*,B.*,
            (select Z.username from user Z where Z.usr_id=A.payment_user_id) as username,
            (select Z.email from user Z where Z.usr_id=A.payment_user_id) as email,
            (select Z.delivery_start_date from delivery_info Z where Z.order_no=A.order_no) as delivery_start_date,
            (select Z.delivery_t_code from delivery_info Z where Z.order_no=A.order_no) as delivery_t_code,
            (select Z.delivery_t_invoice from delivery_info Z where Z.order_no=A.order_no) as delivery_t_invoice,
            (select Z.delivery_status from delivery_info Z where Z.order_no=A.order_no) as delivery_status,
            (select Z.code_name from code Z where Z.code='payment_status' and Z.code_value = A.payment_status) as payment_status_name,
            (select Z.product_made_company_name from product_made_company Z where Z.product_made_company_cd=B.product_made_company_cd) as product_made_company_name,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 1) as file_1,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 2) as file_2,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 3) as file_3,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 4) as file_4,
            (select Z.file_link from product_file Z where Z.key_id = A.product_cd and Z.file_order = 5) as file_5
        FROM payment A left join product B on (B.product_cd = A.product_cd) where 1=1
        ]]>
        <if test="payment_user_id != null"> <![CDATA[AND A.payment_user_id= #{payment_user_id} ]]></if>
        <if test="merchant_uid != null"> <![CDATA[AND A.merchant_uid= #{merchant_uid} ]]></if>
        <if test="order_no != null"> <![CDATA[AND A.order_no= #{order_no} ]]></if>
    </select>
    <update id="updatePayment" parameterType="com.webapp.mall.vo.DeliveryInfoVO">
        update payment set
        payment_status = #{payment_status}
        where order_no=#{merchant_uid}
    </update>
    <update id="updatePaymentManger" parameterType="com.webapp.mall.vo.DeliveryInfoVO">
        update payment set
        payment_status = #{payment_status}
        where order_no=#{order_no}
    </update>
    <insert id="insertPaymentRefund" parameterType="com.webapp.mall.vo.DeliveryInfoVO">
        insert into payment_refund
        (
            merchant_uid,
            cancel_request_amount,
            reason,
            refund_holder,
            refund_bank,
            refund_account
        )values(
            #{merchant_uid},
            #{cancel_request_amount},
            #{reason},
            #{refund_holder},
            #{refund_bank},
            #{refund_account}
        )
    </insert>
</mapper>
