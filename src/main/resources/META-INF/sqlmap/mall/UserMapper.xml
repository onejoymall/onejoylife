<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="mall.UserMapper">
    <insert id="insertUserHistory" parameterType="com.webapp.manager.vo.MgUserVO">
        insert into user_login_history(
        email,
        log_type
        ) values (
        #{email},
        #{log_type}
        )
    </insert>
    <select id="getFindUser" resultType="java.util.HashMap">
        <![CDATA[
        SELECT
          A.*
        FROM user A where phone =#{phone}
        ]]>
    </select>
    <select id="getUserList" resultType="java.util.HashMap">
        /*getUserList*/
        <![CDATA[
        SELECT
          A.*
        FROM user A where email =#{email}
        ]]>
        <if test="level == 10"> <![CDATA[AND A.level >= 9 ]]></if>
        <if test="level != null and level != 10"> <![CDATA[AND A.level= #{level} ]]></if>
        <if test="password != null"> <![CDATA[AND A.password= #{password} ]]></if>
        <if test="phone != null"> <![CDATA[AND A.phone= #{phone} ]]></if>
    </select>

    <select id="getUserStoreList" resultType="java.util.HashMap">
        SELECT
            email as email,
            password as password,
            level as level,
            enable_mg_menu_id as enable_mg_menu_id,
            email_auth_status as status,
            reg_date
        FROM user A where A.email = #{email}
        UNION ALL
        SELECT
            store_id as email,
            store_password as password,
            level as level,
            enable_mg_menu_id as enable_mg_menu_id,
            store_approval_status as status,
            reg_date
        FROM store B where B.store_id = #{email};
    </select>
    <select id="getUserForId" resultType="java.util.HashMap">
        <![CDATA[
        SELECT
          A.*
        FROM user A where usr_id =#{payment_user_id}
        ]]>
    </select>
    <select id="getMailUserList" resultType="java.util.HashMap">
        <![CDATA[
        SELECT
          A.*
        FROM user A where 1=1
        ]]>
        <if test="user_grant != null and user_grant != ''">
            AND A.user_grant in (
                <foreach collection="user_grant" item="item" index="index" separator=",">
                    ${item}
                </foreach>
            )
        </if>
        <if test="age_class != null and age_class != ''">
            <foreach collection="age_class" item="item" index="index" open="AND(" close=")" separator="OR">
                <if test="item != 40">
                    (DATE_FORMAT(NOW(),'%Y') - SUBSTRING(A.birth, 1, 4)) between ${item} AND ${item}+10
                </if>
                <if test="item == 40">
                    (DATE_FORMAT(NOW(),'%Y') - SUBSTRING(A.birth, 1, 4)) >= ${item}
                </if>
            </foreach>
        </if>
        <if test="sex != null and sex != ''">
            AND A.sex in(
                <foreach collection="sex" item="item" index="index" separator=",">
                    ${item}
                </foreach>
            )
        </if>
        <if test="product_ct != null and product_ct != ''">
            AND (select DISTINCT D.product_ct FROM product D JOIN product_history E ON (D.product_cd = E.product_current)
                where SUBSTRING_INDEX(D.product_ct, '|', 1) in(
                <foreach collection="product_ct" item="item" index="index" separator=",">
                    ${item}
                </foreach>
                )
                AND A.usr_id = E.usr_id GROUP BY A.usr_id
            )
        </if>
        <if test="product_class == 'payment'">
        AND (select B.payment_user_id FROM payment B where A.usr_id = B.payment_user_id GROUP BY 1)
        </if>
        <if test="product_class == 'product_cart'">
        AND (select C.cart_user_id FROM product_cart C where A.usr_id = C.cart_user_id GROUP BY 1)
        </if>
        <if test="email_privacy_policy != null and email_privacy_policy == 'exception' and email_privacy_policy != ''">AND A.email_privacy_policy = 'Y'</if>
    </select>
    <insert id="insertMarketingLog" parameterType="java.util.HashMap">
        insert into marketing_send_log(
            usr_id,
            user_grant,
            age_class,
            sex,
            product_ct,
            product_class,
            email_privacy_policy,
            send_text,
            msg_id,
            sms_kind,
            subject,
            email,
            phone
            )
            VALUES (
            #{usr_id},
            #{s_usergrant},
            #{s_ageclass},
            #{s_sex},
            #{goods-cate},
            #{product_class},
            #{email_privacy_policy},
            #{mem-text},
            #{msg_id},
            #{sms_kind},
            #{subject},
            #{email},
            #{phone}
            )
    </insert>
    <insert id="insertUser" parameterType="String">
        <![CDATA[
        insert into user(
        username,email,password,lastname,firstname,email_auth_code,email_auth_status,refferal_code,iso_code,phone,level,group_id,sex,birth)
      VALUES (
        #{username},
        #{email},
        #{password},
        #{lastname},
        #{firstname},
        #{email_auth_code},
        #{email_auth_status},
        #{refferal_code},
        #{iso_code},
        #{phone},
        #{level},
        #{group_id},
        #{sex},
        #{birth}
        )
        ]]>
    </insert>

    <insert id="insertEmailAuth" parameterType="String">
    
        <![CDATA[
        insert into email_auth(
        email,email_auth_code)
      VALUES (
        #{email},
        #{email_auth_code}
        )
        on duplicate KEY update
        email_auth_code=#{email_auth_code}
        ]]>
    </insert>
    <select id="getEmailAuthCode" parameterType="com.webapp.mall.vo.UserVO" resultType="java.util.Map">
        <![CDATA[
        SELECT
          *
        FROM email_auth A where email=#{email} order by reg_date desc limit 1

        ]]>
    </select>
    <select id="getEmailAuthList" resultType="java.util.Map">
        <![CDATA[
        SELECT
          A.*
        FROM email_auth A where 1=1

        ]]>
        <if test="email != null"> <![CDATA[AND A.email= #{email} ]]></if>
        <if test="password_change_code != null"> <![CDATA[AND A.password_change_code= #{password_change_code} ]]></if>
        <![CDATA[ limit 1 ]]>
    </select>
    <select id="getUserConditionInfo" parameterType="Integer" resultType="java.util.Map">
        SELECT *
		FROM user
		WHERE usr_id = #{value}
    </select>
    <update id="updateToken" parameterType="String">
        <![CDATA[
        update user set
        access_token=#{access_token}
        where email = #{email}
        ]]>
    </update>
    <update id="updatePasswordChangeCode" parameterType="String">
        <![CDATA[
        update email_auth set
        password_change_code=#{password_change_code}
        where email = #{email}
        ]]>
    </update>
    <update id="updatePasswordChange" parameterType="String">
        <![CDATA[
        update user set
        password=#{password}
        where email = #{email}
        ]]>
    </update>

    <update id="updatePasswordChangeMember" parameterType="com.webapp.mall.vo.UserVO">
        update user set
	        <if test="newpassword != null and newpassword != ''" >password=#{newpassword},</if>
	        user_privacy_policy=#{user_privacy_policy},
	        email_privacy_policy=#{email_privacy_policy},
	        phone = #{phone},
	        sex = #{sex},
	        birth = #{birth},
	        username = #{username}
        where email = #{email}
       </update>

<!--    <update id="privacy_policy" parameterType="com.webapp.mall.vo.UserVO">
        <![CDATA[
        update user set
        user_privacy_policy=#{user_privacy_policy},
        email_privacy_policy=#{email_privacy_policy}
        where email = #{email}
        ]]>
    </update>-->

 	<update id="updateManagerPassword" parameterType="com.webapp.mall.vo.UserVO">
       /*updateManagerPassword*/ 
        update user set
	        <if test="newpassword != null and newpassword != ''" >password=#{newpassword}</if>
        where email = #{email}
    </update>
    <delete id="deleteUser" parameterType="hashmap">
    	delete from user 
    	where usr_id = #{usr_id}
    </delete>
    <update id="updateStoreManagerPassword" parameterType="com.webapp.mall.vo.UserVO">
       /*updateStoreManagerPassword*/ 
        update store set
	        <if test="newpassword != null and newpassword != ''" >store_password=#{newpassword}</if>
        where store_id = #{email}
    </update>
    
    
    <insert id="insertSnsUser" parameterType="java.util.Map">

        insert into user(
        username,email,password,lastname,firstname,email_auth_code,email_auth_status,refferal_code,iso_code,phone,level,group_id)
      VALUES (
        #{username},
        #{email},
        #{password},
        #{lastname},
        #{firstname},
        #{email_auth_code},
        #{email_auth_status},
        #{refferal_code},
        #{iso_code},
        #{phone},
        #{level},
        #{group_id}
        )
        on duplicate KEY update
        username=#{username}

    </insert>


</mapper>

