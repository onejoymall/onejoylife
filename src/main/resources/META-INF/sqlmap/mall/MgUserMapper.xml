<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="mall.MgUserMapper">
    <select id="getManagerUserListCount" resultType="Integer" parameterType="com.webapp.manager.vo.MgUserVO">
        <![CDATA[
        SELECT
          count(*) cnt
        FROM user A where 1=1
        ]]>
        <if test="searchKeyword!=null and searchKeyword!='' and searchType!=''">
            <foreach item="item" index="index" collection="searchTypeArr" separator=" OR " open="AND (" close=")">
                A.${item} LIKE CONCAT('%', #{searchKeyword},'%' )
            </foreach>
        </if>
        <if test="level != null"> <![CDATA[AND A.level= #{level} ]]></if>
        <if test="phone != null"> <![CDATA[AND A.phone= #{phone} ]]></if>
        <if test="email != null"> <![CDATA[AND A.email= #{email} ]]></if>
    </select>
    <select id="getManagerUserList" resultType="java.util.Map" parameterType="com.webapp.manager.vo.MgUserVO">
        <![CDATA[
        SELECT
          A.*,
          (select Z.user_grant_name from user_grant Z where Z.user_grant_no=A.user_grant) grant_name,
          (select Z.code_name from code Z where Z.code='level' and Z.code_value = A.level) level_name,
          (select IFNULL((sum(IFNULL (Z.point_add,0))-sum(IFNULL (Z.point_use,0))),0) from point_history Z where Z.point_paid_user_id = A.usr_id ) point_amount
        FROM user A where 1=1
        ]]>
        <if test="searchKeyword!=null and searchKeyword!='' and searchType!=''">
            <foreach item="item" index="index" collection="searchTypeArr" separator=" OR " open="AND (" close=")">
                A.${item} LIKE CONCAT('%', #{searchKeyword},'%' )
            </foreach>
        </if>
        <if test="level != null"> <![CDATA[AND A.level= #{level} ]]></if>
        <if test="phone != null"> <![CDATA[AND A.phone= #{phone} ]]></if>
        <if test="email != null"> <![CDATA[AND A.email= #{email} ]]></if>
    </select>

    <select id="getUserDetail" resultType="java.util.Map" parameterType="com.webapp.manager.vo.MgUserVO">
        <![CDATA[
        SELECT A.*, B.*
		, (select Z.code_name from code Z where Z.code='level' and Z.code_value = A.level) level_name
		, (select Z.user_grant_name from user_grant Z where Z.user_grant_no=A.user_grant) grant_name
		, (select IFNULL((sum(IFNULL (Z.point_add,0))-sum(IFNULL (Z.point_use,0))),0) from point_history Z where Z.point_paid_user_id = A.usr_id ) point_amount
		FROM user A JOIN delivery_info_user B
			ON A.email = #{email}
			AND B.order_user_email = A.email
			AND B.default_delivery_info_yn = 'Y'
        ]]>
    </select>
    <select id="getUserHistory" resultType="java.util.Map" parameterType="com.webapp.manager.vo.MgUserVO">
        select
        A.*,
        (select Z.code_name from code Z where Z.code='log_type' and Z.code_value = A.log_type) log_type_name
         from user_login_history A where 1=1
        <if test="email != null"> <![CDATA[AND A.email= #{email} ]]></if>
    </select>
    <select id="getUserHistoryCount" resultType="Integer" parameterType="com.webapp.manager.vo.MgUserVO">
        select count(*) cnt from user_login_history where 1=1
        <if test="email != null"> <![CDATA[AND email= #{email} ]]></if>
    </select>
    <insert id="insertUserGrant" parameterType="com.webapp.manager.vo.MgUserVO">
        insert into user_grant
        (
        <if test="user_grant_no != null"> user_grant_no,</if>
            user_grant_name,
            payment_limit,
            payment_event_amount,
            payment_point_limit,
            event_point
        )values (
        <if test="user_grant_no != null"> #{user_grant_no},</if>
            #{user_grant_name},
            #{payment_limit},
            #{payment_event_amount},
            #{payment_point_limit},
            #{event_point}
        )
        on duplicate KEY update
            user_grant_no=#{user_grant_no},
            user_grant_name=#{user_grant_name},
            payment_limit=#{payment_limit},
            payment_event_amount=#{payment_event_amount},
            payment_point_limit=#{payment_point_limit},
            event_point=#{event_point}

    </insert>
    <select id="getUserGrantList" parameterType="com.webapp.manager.vo.MgUserVO" resultType="java.util.Map">
        select * from user_grant
    </select>
    <select id="getUserGrantListCount" parameterType="com.webapp.manager.vo.MgUserVO" resultType="Integer">
        select count(*) cnt from user_grant
    </select>
    <select id="getUserGrant" parameterType="com.webapp.manager.vo.MgUserVO" resultType="java.util.Map">
        select * from user_grant where user_grant_no = #{user_grant_no}
    </select>
    <update id="userGrantListUpdate" parameterType="com.webapp.manager.vo.MgUserVO">
        <![CDATA[
        update user set user_grant = #{user_grant} where usr_id in
        ]]>
        <foreach collection="chk" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>
    <update id="userLevelUpdate">
    	<![CDATA[
    	UPDATE user SET
		LEVEL = #{level_name}
		WHERE usr_id = #{point_paid_user_id}
		]]>
    </update>
    <select id="getMenuDepth" resultType="java.util.Map">
    	SELECT concat(depth1, IF(depth2 IS NOT NULL,' > ',''), IFNULL(depth2,''), IF(depth3 IS NOT NULL,' > ',''), IFNULL(depth3,'')) menu_name,
		 		if(depth3 IS NOT NULL,C.menu_id,if(depth2 IS NOT NULL,B.menu_id,A.menu_id)) menu_id
		FROM (SELECT menu_name depth1, menu_id
			  FROM user_manager_menu
			  WHERE menu_upper_id = 0) A
		LEFT JOIN (SELECT menu_name depth2, menu_id, menu_upper_id
			  FROM user_manager_menu
			  WHERE menu_upper_id IN (SELECT menu_id
									  FROM user_manager_menu
									  WHERE menu_upper_id = 0)) B
		ON B.menu_upper_id = A.menu_id
		LEFT JOIN (SELECT menu_name depth3, menu_id, menu_upper_id
				   FROM user_manager_menu
				   WHERE menu_upper_id IN (SELECT menu_id
										   FROM user_manager_menu
										   WHERE menu_upper_id IN (SELECT menu_id
																   FROM user_manager_menu
																   WHERE menu_upper_id = 0))) C
		ON C.menu_upper_id = B.menu_id
		ORDER BY A.menu_id,B.menu_id,C.menu_id
    </select>
    <update id="userEnableMenuUpdate">
    	<![CDATA[
    	UPDATE user SET
		enable_mg_menu_id = #{enable_menu}
		WHERE usr_id = #{point_paid_user_id}
		]]>
    </update>
</mapper>

