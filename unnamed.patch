Index: web/WEB-INF/web.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/WEB-INF/web.xml	(date 1579194244497)
+++ web/WEB-INF/web.xml	(date 1579194244497)
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
+    <context-param>
+        <param-name>contextConfigLocation</param-name>
+        <param-value>classpath:/META-INF/config/*-context.xml</param-value>
+    </context-param>
+
+    <!-- 스프링 보안 필터 -->
+    <filter>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
+    </filter>
+    <filter-mapping>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <url-pattern>/*</url-pattern>
+    </filter-mapping>
+
+    <listener>
+        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
+    </listener>
+
+    <filter>
+        <filter-name>RequestFilter</filter-name>
+        <filter-class>
+            com.webapp.common.filter.RequestFilter
+        </filter-class>
+    </filter>
+    <filter-mapping>
+        <filter-name>RequestFilter</filter-name>
+        <url-pattern>/*</url-pattern>
+    </filter-mapping>
+
+
+    <servlet>
+        <servlet-name>appServlet</servlet-name>
+        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
+        <init-param>
+            <param-name>contextConfigLocation</param-name>
+            <param-value>classpath:/META-INF/config/servlet-context.xml</param-value>
+        </init-param>
+        <load-on-startup>1</load-on-startup>
+    </servlet>
+    <servlet-mapping>
+        <servlet-name>appServlet</servlet-name>
+        <url-pattern>*.do</url-pattern>
+        <url-pattern>*.json</url-pattern>
+        <url-pattern>/</url-pattern>
+    </servlet-mapping>
+</web-app>
\ No newline at end of file
Index: web/WEB-INF/views/mall/login.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/WEB-INF/views/mall/login.jsp	(date 1579191221475)
+++ web/WEB-INF/views/mall/login.jsp	(date 1579191221475)
@@ -0,0 +1,16 @@
+<%--
+  Created by IntelliJ IDEA.
+  User: ttagg
+  Date: 2020-01-17
+  Time: 오전 1:13
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>Title</title>
+</head>
+<body>
+
+</body>
+</html>
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(date 1579188918239)
+++ pom.xml	(date 1579188918239)
@@ -0,0 +1,303 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>com.webapp</groupId>
+    <artifactId>onejoylife</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <properties>
+        <java-version>1.8</java-version>
+        <org.springframework-version>4.3.2.RELEASE</org.springframework-version>
+        <org.springframework-security-version>4.2.6.RELEASE</org.springframework-security-version>
+        <org.aspectj-version>1.6.10</org.aspectj-version>
+        <org.slf4j-version>1.6.6</org.slf4j-version>
+    </properties>
+    <dependencies>
+    <!-- Spring -->
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-context</artifactId>
+            <version>${org.springframework-version}</version>
+            <exclusions>
+                <!-- Exclude Commons Logging in favor of SLF4j -->
+                <exclusion>
+                    <groupId>commons-logging</groupId>
+                    <artifactId>commons-logging</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-webmvc</artifactId>
+            <version>${org.springframework-version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-web</artifactId>
+            <version>${org.springframework-version}</version>
+        </dependency>
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>javax.servlet-api</artifactId>
+            <version>3.1.0</version>
+            <scope>provided</scope>
+        </dependency>
+        <!-- Spring Security -->
+        <dependency>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-web</artifactId>
+            <version>${org.springframework-security-version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-config</artifactId>
+            <version>${org.springframework-security-version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-taglibs</artifactId>
+            <version>${org.springframework-security-version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.security.oauth</groupId>
+            <artifactId>spring-security-oauth2</artifactId>
+            <version>2.1.0.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-jwt</artifactId>
+            <version>1.0.9.RELEASE</version>
+        </dependency>
+        <!-- AspectJ -->
+        <dependency>
+            <groupId>org.aspectj</groupId>
+            <artifactId>aspectjrt</artifactId>
+            <version>${org.aspectj-version}</version>
+        </dependency>
+
+        <!-- Logging -->
+        <dependency>
+            <groupId>org.lazyluke</groupId>
+            <artifactId>log4jdbc-remix</artifactId>
+            <version>0.2.7</version>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+            <version>${org.slf4j-version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>jcl-over-slf4j</artifactId>
+            <version>${org.slf4j-version}</version>
+            <scope>runtime</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-log4j12</artifactId>
+            <version>${org.slf4j-version}</version>
+            <scope>runtime</scope>
+        </dependency>
+        <dependency>
+            <groupId>log4j</groupId>
+            <artifactId>log4j</artifactId>
+            <version>1.2.15</version>
+            <exclusions>
+                <exclusion>
+                    <groupId>javax.mail</groupId>
+                    <artifactId>mail</artifactId>
+                </exclusion>
+                <exclusion>
+                    <groupId>javax.jms</groupId>
+                    <artifactId>jms</artifactId>
+                </exclusion>
+                <exclusion>
+                    <groupId>com.sun.jdmk</groupId>
+                    <artifactId>jmxtools</artifactId>
+                </exclusion>
+                <exclusion>
+                    <groupId>com.sun.jmx</groupId>
+                    <artifactId>jmxri</artifactId>
+                </exclusion>
+            </exclusions>
+            <scope>runtime</scope>
+        </dependency>
+        <!-- @Inject -->
+        <dependency>
+            <groupId>javax.inject</groupId>
+            <artifactId>javax.inject</artifactId>
+            <version>1</version>
+        </dependency>
+
+        <!-- Servlet -->
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>servlet-api</artifactId>
+            <version>2.5</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>javax.servlet.jsp</groupId>
+            <artifactId>jsp-api</artifactId>
+            <version>2.1</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>jstl</artifactId>
+            <version>1.2</version>
+        </dependency>
+
+        <!-- Test -->
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <version>4.7</version>
+            <scope>test</scope>
+        </dependency>
+
+        <!-- security -->
+        <dependency>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-web</artifactId>
+            <version>4.2.2.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-config</artifactId>
+            <version>4.2.2.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mariadb.jdbc</groupId>
+            <artifactId>mariadb-java-client</artifactId>
+            <version>1.1.7</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.mybatis</groupId>
+            <artifactId>mybatis</artifactId>
+            <version>3.4.6</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mybatis</groupId>
+            <artifactId>mybatis-spring</artifactId>
+            <version>1.3.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mybatis</groupId>
+            <artifactId>mybatis-ehcache</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-jdbc</artifactId>
+            <version>${org.springframework-version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>commons-dbcp</groupId>
+            <artifactId>commons-dbcp</artifactId>
+            <version>1.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-websocket</artifactId>
+            <version>${org.springframework-version}</version>
+        </dependency>
+
+        <!-- json -->
+        <dependency>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-databind</artifactId>
+            <version>2.5.1</version>
+        </dependency>
+        <!-- <dependency> -->
+        <!-- <groupId>com.fasterxml.jackson.core</groupId> -->
+        <!-- <artifactId>jackson-annotations</artifactId> -->
+        <!-- <version>2.7.5</version> -->
+        <!-- </dependency> -->
+
+        <!-- <dependency> -->
+        <!-- <groupId>com.fasterxml.jackson.core</groupId> -->
+        <!-- <artifactId>jackson-core</artifactId> -->
+        <!-- <version>2.7.5</version> -->
+        <!-- </dependency> -->
+
+        <dependency>
+            <groupId>com.googlecode.json-simple</groupId>
+            <artifactId>json-simple</artifactId>
+            <version>1.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.json</groupId>
+            <artifactId>json</artifactId>
+            <version>20180130</version>
+        </dependency>
+
+        <dependency>
+            <groupId>commons-io</groupId>
+            <artifactId>commons-io</artifactId>
+            <version>2.5</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-lang3</artifactId>
+            <version>3.0</version>
+        </dependency>
+        <!--mailer-->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-mail</artifactId>
+            <version>1.4.3.RELEASE</version>
+        </dependency>
+        <!--push-->
+        <dependency>
+            <groupId>com.google.firebase</groupId>
+            <artifactId>firebase-admin</artifactId>
+            <version>6.6.0</version>
+        </dependency>
+    </dependencies>
+    <build>
+        <plugins>
+            <plugin>
+                <artifactId>maven-eclipse-plugin</artifactId>
+                <version>2.9</version>
+                <configuration>
+                    <additionalProjectnatures>
+                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
+                    </additionalProjectnatures>
+                    <additionalBuildcommands>
+                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
+                    </additionalBuildcommands>
+                    <downloadSources>true</downloadSources>
+                    <downloadJavadocs>true</downloadJavadocs>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>2.5.1</version>
+                <configuration>
+                    <source>1.6</source>
+                    <target>1.6</target>
+                    <compilerArgument>-Xlint:all</compilerArgument>
+                    <showWarnings>true</showWarnings>
+                    <showDeprecation>true</showDeprecation>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>exec-maven-plugin</artifactId>
+                <version>1.2.1</version>
+                <configuration>
+                    <mainClass>org.test.int1.Main</mainClass>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
+</project>
\ No newline at end of file
Index: src/main/resources/META-INF/config/root-context.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/META-INF/config/root-context.xml	(date 1569342246000)
+++ src/main/resources/META-INF/config/root-context.xml	(date 1569342246000)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
+    	
+    	<bean id="jsonMapper" class="com.fasterxml.jackson.databind.ObjectMapper" />
+		<bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
+			<property name="objectMapper" ref="jsonMapper" />
+		</bean>
+</beans>
Index: src/main/resources/META-INF/config/servlet-context.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/META-INF/config/servlet-context.xml	(date 1579191571688)
+++ src/main/resources/META-INF/config/servlet-context.xml	(date 1579191571688)
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans:beans xmlns="http://www.springframework.org/schema/mvc"
+	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xmlns:util="http://www.springframework.org/schema/util"
+	xmlns:beans="http://www.springframework.org/schema/beans"
+	xmlns:context="http://www.springframework.org/schema/context"
+	xmlns:mvc="http://www.springframework.org/schema/mvc"
+	xmlns:websocket="http://www.springframework.org/schema/websocket"
+	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
+		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
+		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">
+
+	<!-- DispatcherServlet Context: defines this servlet's 
+			request-processing infrastructure -->
+	
+	<!-- Enables the Spring MVC @Controller programming model -->
+	<annotation-driven />
+
+	<context:component-scan base-package="com.webapp" />
+
+	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
+	<resources mapping="/resources/**" location="/resources/" />
+
+	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
+	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
+		<beans:property name="prefix" value="/WEB-INF/views/" />
+		<beans:property name="suffix" value=".jsp" />
+	</beans:bean>
+	
+	<context:property-placeholder location="classpath*:/META-INF/properties/*.properties" />  
+	
+	<mvc:interceptors>
+		<mvc:interceptor>
+			<mvc:mapping path="/api/**" />
+			<beans:bean id="commonInterceptor" class="com.webapp.common.interceptor.SessionInterceptor"></beans:bean>
+		</mvc:interceptor>
+	</mvc:interceptors>
+	
+	<mvc:interceptors>
+		<mvc:interceptor>
+			<mvc:mapping path="/**" />
+			<beans:ref bean="localeChangeInterceptor" />
+		</mvc:interceptor>
+	</mvc:interceptors>
+	
+	<beans:bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
+		<beans:property name="paramName" value="lang" />
+	</beans:bean>
+</beans:beans>
Index: src/main/resources/META-INF/config/locale-context.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/META-INF/config/locale-context.xml	(date 1579192559554)
+++ src/main/resources/META-INF/config/locale-context.xml	(date 1579192559554)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
+	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:lang="http://www.springframework.org/schema/lang"
+	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
+		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
+		http://www.springframework.org/schema/lang http://www.springframework.org/schema/mvc/spring-lang.xsd">
+
+
+<!--	<bean id="messageSource" class="com.webapp.common.support.DatabaseMessageResource">-->
+<!--	</bean>-->
+	
+	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
+		<property name="cookieMaxAge" value="-1" />
+		<property name="defaultLocale" value="ko" />
+	</bean>
+
+</beans>
\ No newline at end of file
Index: src/main/resources/META-INF/config/datasource-context.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/META-INF/config/datasource-context.xml	(date 1569342252000)
+++ src/main/resources/META-INF/config/datasource-context.xml	(date 1569342252000)
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+ 	xmlns:context="http://www.springframework.org/schema/context"
+ 	xmlns:mvc="http://www.springframework.org/schema/mvc"
+ 	xmlns:aop="http://www.springframework.org/schema/aop"
+ 	xmlns:tx="http://www.springframework.org/schema/tx"
+ 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+ 	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+   						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
+   						http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
+   						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
+   						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd" >
+     
+    <bean id="dataSourceSpied" class="org.apache.ibatis.datasource.pooled.PooledDataSource" >
+        <property name="driver" value="${jdbc.driver}"></property>
+        <property name="url" value="${jdbc.url}"></property>
+        <property name="username" value="${jdbc.username}"></property> 
+        <property name="password" value="${jdbc.password}"></property>
+        
+        <property name="poolMaximumActiveConnections" value="20"/>
+        <property name="poolMaximumIdleConnections" value="20"/>
+        <property name="poolMaximumCheckoutTime" value="20000"/>
+        <property name="poolPingEnabled" value="true"/>
+        <property name="poolPingQuery" value="select 1"/>
+        <property name="poolPingConnectionsNotUsedFor" value="43200"/>
+        <property name="poolTimeToWait" value="30000"/>
+    </bean>
+    
+    <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
+        <constructor-arg ref="dataSourceSpied" />
+        <property name="logFormatter">
+            <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
+                <property name="loggingType" value="MULTI_LINE" />
+                <property name="sqlPrefix" value="SQL         :  "/>
+            </bean>
+        </property>
+    </bean>
+    
+    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
+        <property name="dataSource" ref="dataSource"></property>
+        <property name="configLocation" value="classpath:/META-INF/sqlmap/sql-map-config.xml" />
+        
+        <property name="mapperLocations" value="classpath:/META-INF/sqlmap/**/*Mapper.xml" />
+    </bean>
+    
+    <bean id="transactionManager"
+        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
+        <property name="dataSource" ref="dataSource"></property>
+    </bean>
+    
+    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
+        <constructor-arg ref="sqlSessionFactory"></constructor-arg>
+    </bean>
+</beans>
+
Index: src/main/java/com/webapp/common/security/dao/UserInfoDaoImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/security/dao/UserInfoDaoImpl.java	(date 1579189609589)
+++ src/main/java/com/webapp/common/security/dao/UserInfoDaoImpl.java	(date 1579189609589)
@@ -0,0 +1,24 @@
+package com.webapp.common.security.dao;
+
+import org.apache.ibatis.session.SqlSession;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Repository;
+
+import com.webapp.common.security.model.UserInfo;
+
+@Repository("userInfoDao")
+public class UserInfoDaoImpl implements UserInfoDao{
+
+	 @Autowired
+     private SqlSession sqlSession;
+  
+     public void setSqlSession(SqlSession sqlSession){
+         this.sqlSession = sqlSession;
+     }
+     
+     
+     @Override
+     public UserInfo selectUserInfo(String usrId) {
+    	 return sqlSession.selectOne("userMngMapper.selectUserInfo", usrId);
+     }
+}
Index: src/main/java/com/webapp/common/security/dao/UserInfoDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/security/dao/UserInfoDao.java	(date 1579189609719)
+++ src/main/java/com/webapp/common/security/dao/UserInfoDao.java	(date 1579189609719)
@@ -0,0 +1,9 @@
+package com.webapp.common.security.dao;
+
+import com.webapp.common.security.model.UserInfo;
+
+public interface UserInfoDao {
+
+    public UserInfo selectUserInfo(String usrId);
+    
+}
Index: src/main/java/com/webapp/mall/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/mall/controller/UserController.java	(date 1579192503284)
+++ src/main/java/com/webapp/mall/controller/UserController.java	(date 1579192503284)
@@ -0,0 +1,29 @@
+package com.webapp.mall.controller;
+
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.ModelMap;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RequestParam;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+@Controller
+public class UserController {
+    @RequestMapping(value = "/login", method = RequestMethod.GET, produces = "application/json")
+    public String index(@RequestParam HashMap params, ModelMap model) throws Exception {
+//        List<Map<String, Object>> userList = null;
+//        Map<String, String> param = new HashMap<String, String>();
+        try{
+//            param.put("USR_ID","") //사용자조회시 사용
+//            userList = userDAO.getUserList(params);
+        }catch(Exception e){
+            e.printStackTrace();
+        }
+//        model.addAttribute("userList", userList);
+
+        return "mall/login";
+    }
+}
Index: src/main/java/com/webapp/common/security/model/UserInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/security/model/UserInfo.java	(date 1579189609675)
+++ src/main/java/com/webapp/common/security/model/UserInfo.java	(date 1579189609675)
@@ -0,0 +1,36 @@
+package com.webapp.common.security.model;
+
+public class UserInfo{
+	
+	private String usrId;
+	private String usrPw;
+	private String authId;
+	
+	public String getUsrId() {
+		return usrId;
+	}
+
+	public void setUsrId(String usrId) {
+		this.usrId = usrId;
+	}
+
+	public String getUsrPw() {
+		return usrPw;
+	}
+
+	public void setUsrPw(String usrPw) {
+		this.usrPw = usrPw;
+	}
+
+	public String getAuthId() {
+		return authId;
+	}
+
+	public void setAuthId(String authId) {
+		this.authId = authId;
+	}
+	
+}
+
+
+
Index: src/main/java/com/webapp/common/security/service/CustomAuthenticationProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/security/service/CustomAuthenticationProvider.java	(date 1579189609509)
+++ src/main/java/com/webapp/common/security/service/CustomAuthenticationProvider.java	(date 1579189609509)
@@ -0,0 +1,68 @@
+package com.webapp.common.security.service;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.authentication.AuthenticationProvider;
+import org.springframework.security.authentication.BadCredentialsException;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.util.StringUtils;
+
+import com.webapp.common.security.model.UserInfo;
+
+public class CustomAuthenticationProvider implements AuthenticationProvider {
+	private static final Logger logger = LoggerFactory.getLogger(CustomAuthenticationProvider.class);
+    
+    @Autowired
+    private PasswordEncoder passwordEncoder;
+
+    @Autowired
+    private CustomUserDetailService userDetailService;
+
+    @Override
+    public boolean supports(Class<?> authentication) {
+        return authentication.equals(UsernamePasswordAuthenticationToken.class);
+    }
+
+    private boolean isValidAccount(Authentication authentication, UserInfo user, String inputPassword) {
+      
+    	logger.info("[자체 로그인] user id is {}", user.getUsrId());
+    	logger.info("[자체 로그인] user inputPassword is {}", passwordEncoder.encode(inputPassword));
+    	
+    	return passwordEncoder.matches(inputPassword, user.getUsrPw());
+    }
+
+    @Override
+    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
+        String username = authentication.getName();
+        String password = (String) authentication.getCredentials();
+
+        logger.info("로그인 시도 - username : {} / password : {}", username, password);
+
+        if (!StringUtils.hasText(username)) {
+            throw new UsernameNotFoundException("Incorrect Parameter");
+        }
+
+        UserInfo userInfo = null;
+        try {
+        	userInfo = userDetailService.findByUsrId(username);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        if (userInfo == null) {
+            throw new UsernameNotFoundException("계정정보가 존재하지 않습니다.");
+        }
+
+        if (!isValidAccount(authentication, userInfo, password)) {
+            throw new BadCredentialsException("계정정보가 일치하지 않습니다.");
+
+        }
+
+        return userDetailService.getToken(userInfo);
+    }
+}
Index: src/main/java/com/webapp/common/security/service/CustomUserDetailService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/security/service/CustomUserDetailService.java	(date 1579189609782)
+++ src/main/java/com/webapp/common/security/service/CustomUserDetailService.java	(date 1579189609782)
@@ -0,0 +1,110 @@
+package com.webapp.common.security.service;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.stereotype.Service;
+import org.springframework.util.StringUtils;
+
+import com.webapp.common.security.TokenUser;
+import com.webapp.common.security.dao.UserInfoDao;
+import com.webapp.common.security.model.UserInfo;
+
+@Service
+public class CustomUserDetailService implements UserDetailsService {
+
+    @Autowired
+    private UserInfoDao dao;
+
+    public UserInfo findByUsrId(String usrId) throws Exception {
+        if (!StringUtils.hasText(usrId)) {
+            throw new Exception("Incorrect Parameter");
+        }
+
+        return dao.selectUserInfo(usrId);
+    }
+
+    @Override
+    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
+
+        String usrId = username;
+        UserInfo user = dao.selectUserInfo(username);
+
+        if (user == null)
+            throw new UsernameNotFoundException(String.format("User %s does not exist!", usrId));
+
+        return new UserRepositoryUserDetails(user);
+    }
+
+    public UsernamePasswordAuthenticationToken getToken(UserInfo user) {
+
+        List<GrantedAuthority> roles = getUserRoles(user);
+        TokenUser tokenUser = new TokenUser();
+        tokenUser.setUsrId(user.getUsrId());
+        return new UsernamePasswordAuthenticationToken(user.getUsrId(), null, roles);
+    }
+
+    @SuppressWarnings("unchecked")
+	private List<GrantedAuthority> getUserRoles(UserInfo user) {
+        UserRepositoryUserDetails userDetails = new UserRepositoryUserDetails(user);
+        return (List<GrantedAuthority>) userDetails.getAuthorities();
+    }
+
+    @SuppressWarnings("serial")
+	private class UserRepositoryUserDetails implements UserDetails {
+
+        private UserInfo user;
+
+        public UserRepositoryUserDetails(UserInfo userInfo) {
+            this.user = userInfo;
+        }
+
+        @Override
+        public Collection<? extends GrantedAuthority> getAuthorities() {
+
+            List<GrantedAuthority> roles = new ArrayList<GrantedAuthority>();
+            roles.add(new SimpleGrantedAuthority("ROLE_USER"));
+
+            return roles;
+        }
+
+        @Override
+        public String getUsername() {
+            return user.getUsrId();
+        }
+
+        @Override
+        public boolean isAccountNonExpired() {
+            return true;
+        }
+
+        @Override
+        public boolean isAccountNonLocked() {
+            return true;
+        }
+
+        @Override
+        public boolean isCredentialsNonExpired() {
+            return true;
+        }
+
+        @Override
+        public boolean isEnabled() {
+            return true;
+        }
+
+		@Override
+		public String getPassword() {
+			// TODO Auto-generated method stub
+			return null;
+		}
+    }
+}
Index: src/main/resources/META-INF/sqlmap/userMngMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/META-INF/sqlmap/userMngMapper.xml	(date 1579193975556)
+++ src/main/resources/META-INF/sqlmap/userMngMapper.xml	(date 1579193975556)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+
+<mapper namespace="userMngMapper">
+    
+    <select id="selectUserInfo" parameterType="java.lang.String" resultType="com.webapp.common.security.model.UserInfo">
+    	<![CDATA[
+    		SELECT
+	    		a.usr_id as usrId
+				, a.usr_pw as usrPw
+				, b.auth_id as authId
+    		FROM user_info a
+    		LEFT JOIN user_auth_info b ON a.usr_id = b.usr_id
+    		WHERE a.usr_id = #{usrId}
+    	]]>    	
+    </select>
+</mapper>
\ No newline at end of file
Index: src/main/java/com/webapp/common/security/CORSFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/security/CORSFilter.java	(date 1579189609517)
+++ src/main/java/com/webapp/common/security/CORSFilter.java	(date 1579189609517)
@@ -0,0 +1,49 @@
+package com.webapp.common.security;
+ 
+
+import java.io.IOException;
+
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Component;
+
+@Component
+public class CORSFilter implements Filter {
+
+    private static final Logger logger = LoggerFactory.getLogger(CORSFilter.class);
+    
+    @Override
+    public void init(FilterConfig filterConfig) throws ServletException {
+
+    }
+
+    @Override
+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
+
+        HttpServletRequest req = (HttpServletRequest) request;
+        HttpServletResponse httpServletResponse = (HttpServletResponse) response;
+
+        logger.error("CORS filter request is " + req.getRequestURL());
+
+        httpServletResponse.setHeader("Access-Control-Allow-Origin", "*");
+        httpServletResponse.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE");
+        httpServletResponse.setHeader("Access-Control-Max-Age", "3600");
+        httpServletResponse.setHeader("Access-Control-Allow-Headers", "X-XSRF-TOKEN, XSRF-TOKEN, ajax, Origin, X-Requested-With, Content-Type, Accept, Key, Authorization");
+
+        chain.doFilter(request, response);
+    }
+
+    @Override
+    public void destroy() {
+
+    }
+}
Index: src/main/java/com/webapp/common/security/TokenUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/security/TokenUser.java	(date 1579189609571)
+++ src/main/java/com/webapp/common/security/TokenUser.java	(date 1579189609571)
@@ -0,0 +1,18 @@
+package com.webapp.common.security;
+
+import java.io.Serializable;
+
+public class TokenUser implements Serializable {
+
+    private static final long serialVersionUID = 1604548230417139917L;
+
+    private String usrId;
+
+	public String getUsrId() {
+		return usrId;
+	}
+
+	public void setUsrId(String usrId) {
+		this.usrId = usrId;
+	}
+}
Index: src/main/java/com/webapp/common/security/CustomTokenEnhancer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/security/CustomTokenEnhancer.java	(date 1579189609627)
+++ src/main/java/com/webapp/common/security/CustomTokenEnhancer.java	(date 1579189609627)
@@ -0,0 +1,19 @@
+package com.webapp.common.security;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;
+import org.springframework.security.oauth2.common.OAuth2AccessToken;
+import org.springframework.security.oauth2.provider.OAuth2Authentication;
+import org.springframework.security.oauth2.provider.token.TokenEnhancer;
+
+public class CustomTokenEnhancer implements TokenEnhancer {
+    @Override
+    public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication) {
+        Map<String, Object> additionalInfo = new HashMap<String, Object>();
+        additionalInfo.put("organization", authentication.getName()); // + randomAlphabetic(4));
+        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInfo);
+        return accessToken;
+    }
+}
Index: src/main/resources/META-INF/sqlmap/sql-map-config.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/META-INF/sqlmap/sql-map-config.xml	(date 1569342234000)
+++ src/main/resources/META-INF/sqlmap/sql-map-config.xml	(date 1569342234000)
@@ -0,0 +1,13 @@
+<!DOCTYPE configuration
+    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
+    "http://mybatis.org/dtd/mybatis-3-config.dtd">
+ 
+<configuration>
+ 	
+ 	<typeAliases>
+ 	</typeAliases>
+ 	
+    <mappers>
+    </mappers>
+    
+</configuration>
\ No newline at end of file
Index: src/main/java/com/webapp/common/security/WebSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/security/WebSecurityConfig.java	(date 1579194852402)
+++ src/main/java/com/webapp/common/security/WebSecurityConfig.java	(date 1579194852402)
@@ -0,0 +1,59 @@
+package com.webapp.common.security;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.authentication.AuthenticationProvider;
+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.builders.WebSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+
+import com.webapp.common.security.service.CustomAuthenticationProvider;
+
+@Configuration
+@EnableWebSecurity
+public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
+
+    @Override
+    public void configure(WebSecurity web) throws Exception {
+        web.ignoring()
+        	.antMatchers("/resources/**")
+        	.antMatchers("/**/introView.do")
+            .antMatchers("/api/pay/multilanglist")
+            .antMatchers("/api/assist/order")
+            .antMatchers("/api/assist/result")
+            .antMatchers("/login")
+            .antMatchers("/index")
+        	.antMatchers("/");
+    }
+
+    @Override
+    protected void configure(HttpSecurity http) throws Exception {
+        http.csrf().disable().exceptionHandling();
+    }
+
+    @Override
+    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
+        auth.authenticationProvider(daoAuthenticationProvider());
+    }
+
+    @Bean
+    public AuthenticationProvider daoAuthenticationProvider() {
+        return new CustomAuthenticationProvider();
+    }
+
+    @Bean
+    public PasswordEncoder passwordEncoder() {
+        return new BCryptPasswordEncoder(10);
+    }
+
+    @Override
+    @Bean(name = "authenticationManagerBean")
+    public AuthenticationManager authenticationManagerBean() throws Exception {
+        return super.authenticationManagerBean();
+    }
+}
Index: src/main/resources/META-INF/properties/assist_properies.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>x-windows-949
===================================================================
--- src/main/resources/META-INF/properties/assist_properies.properties	(date 1569342234000)
+++ src/main/resources/META-INF/properties/assist_properies.properties	(date 1569342234000)
@@ -0,0 +1,3 @@
+assistMerchantid=976060
+assistLogin=gtsproject_sale
+assistPassword=1qazqrassist
\ No newline at end of file
Index: src/main/java/com/webapp/common/security/OAuth2AuthorizationServerConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/security/OAuth2AuthorizationServerConfig.java	(date 1579189609555)
+++ src/main/java/com/webapp/common/security/OAuth2AuthorizationServerConfig.java	(date 1579189609555)
@@ -0,0 +1,91 @@
+package com.webapp.common.security;
+
+import java.util.Arrays;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Primary;
+import org.springframework.http.HttpMethod;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
+import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurer;
+import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
+import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
+import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
+import org.springframework.security.oauth2.provider.token.DefaultTokenServices;
+import org.springframework.security.oauth2.provider.token.TokenEnhancer;
+import org.springframework.security.oauth2.provider.token.TokenEnhancerChain;
+import org.springframework.security.oauth2.provider.token.TokenStore;
+import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
+import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;
+
+@Configuration
+@EnableAuthorizationServer
+public class OAuth2AuthorizationServerConfig implements AuthorizationServerConfigurer {
+
+    private String resourceId = "oxy-api-resource-id";
+    private String secret = "secret";
+
+    @Autowired
+    @Qualifier("authenticationManagerBean")
+    private AuthenticationManager authenticationManager;
+
+	@Override
+	public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {
+        security.allowFormAuthenticationForClients()
+                .checkTokenAccess("permitAll()");
+		
+	}
+
+	@Override
+	public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
+        clients.inMemory()
+               .withClient("clientapp")
+               .authorizedGrantTypes("password", "refresh_token")
+               .authorities("ROLE_USER")
+               .scopes("read", "write")
+               .resourceIds(resourceId)
+               .accessTokenValiditySeconds(86400 * 365 * 10) // 10 year
+               .refreshTokenValiditySeconds(86400 * 365 * 10); // 10 year
+	}
+
+	@Override
+	public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
+        TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();
+        tokenEnhancerChain.setTokenEnhancers(
+            Arrays.asList(tokenEnhancer(), accessTokenConverter())
+        );
+
+        endpoints.tokenStore(tokenStore())
+                .allowedTokenEndpointRequestMethods(HttpMethod.GET, HttpMethod.POST)
+                .accessTokenConverter(accessTokenConverter())
+                .authenticationManager(this.authenticationManager);
+	}
+
+    @Bean
+    public TokenEnhancer tokenEnhancer() {
+        return new CustomTokenEnhancer();
+    }
+
+    @Bean
+    public TokenStore tokenStore() {
+        return new JwtTokenStore(accessTokenConverter());
+    }
+
+    public JwtAccessTokenConverter accessTokenConverter() {
+        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
+        converter.setSigningKey(secret);
+        return converter;
+    }
+
+    @Bean
+    @Primary
+    public DefaultTokenServices tokenServices() {
+        final DefaultTokenServices defaultTokenServices = new DefaultTokenServices();
+        defaultTokenServices.setTokenStore(tokenStore());
+        defaultTokenServices.setSupportRefreshToken(true);
+        return defaultTokenServices;
+    }
+}
Index: src/main/resources/META-INF/properties/jdbc_properties.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>x-windows-949
===================================================================
--- src/main/resources/META-INF/properties/jdbc_properties.properties	(date 1579193901282)
+++ src/main/resources/META-INF/properties/jdbc_properties.properties	(date 1579193901282)
@@ -0,0 +1,10 @@
+jdbc.driver=org.mariadb.jdbc.Driver
+jdbc.url=jdbc:mariadb://onejoylife.cm7ncxzlg5yk.ap-northeast-2.rds.amazonaws.com/onejoylife
+jdbc.username=onejoylife
+jdbc.password=!1qazone
+
+#jdbc.driver=oracle.jdbc.driver.OracleDriver
+#jdbc.url=jdbc:oracle:thin:@192.168.94.2:1521:ORA12C
+#jdbc.username=bims
+#jdbc.password=bims
+
Index: src/main/java/com/webapp/common/security/OAuth2ResourceServerConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/security/OAuth2ResourceServerConfig.java	(date 1579189609539)
+++ src/main/java/com/webapp/common/security/OAuth2ResourceServerConfig.java	(date 1579189609539)
@@ -0,0 +1,65 @@
+package com.webapp.common.security;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Primary;
+import org.springframework.http.HttpMethod;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
+import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
+import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
+import org.springframework.security.oauth2.provider.token.DefaultTokenServices;
+import org.springframework.security.oauth2.provider.token.TokenStore;
+import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
+import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;
+import org.springframework.security.web.access.channel.ChannelProcessingFilter;
+
+@Configuration
+@EnableResourceServer
+public class OAuth2ResourceServerConfig extends ResourceServerConfigurerAdapter {
+
+    private String resourceId = "oxy-api-resource-id";
+    private String secret = "secret";
+
+
+    @Override
+    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
+        resources.resourceId(resourceId)
+                .tokenServices(tokenServices());
+    }
+
+    @Bean
+    public TokenStore tokenStore() {
+        return new JwtTokenStore(accessTokenConverter());
+    }
+
+    @Bean
+    public JwtAccessTokenConverter accessTokenConverter() {
+        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
+        converter.setSigningKey(secret);
+        return converter;
+    }
+
+    @Primary
+    @Bean
+    public DefaultTokenServices tokenServices() {
+        DefaultTokenServices defaultTokenServices = new DefaultTokenServices();
+        defaultTokenServices.setTokenStore(tokenStore());
+        return defaultTokenServices;
+    }
+
+    @Override
+    public void configure(HttpSecurity http) throws Exception {
+
+        http.addFilterBefore(new CORSFilter(), ChannelProcessingFilter.class)
+            .authorizeRequests()
+            .antMatchers(HttpMethod.GET, "/").permitAll()
+            .antMatchers(HttpMethod.GET, "/users").permitAll()
+            .antMatchers(HttpMethod.POST, "/oauth/token").permitAll()
+            .antMatchers("/login.do").permitAll()
+            .antMatchers(HttpMethod.OPTIONS).permitAll()
+            //.antMatchers(HttpMethod.GET, "/**").permitAll()
+            //.antMatchers().authenticated()
+            .anyRequest().hasRole("USER");
+    }
+}
Index: src/main/resources/META-INF/properties/qremail_properies.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>x-windows-949
===================================================================
--- src/main/resources/META-INF/properties/qremail_properies.properties	(date 1569342232000)
+++ src/main/resources/META-INF/properties/qremail_properies.properties	(date 1569342232000)
@@ -0,0 +1,11 @@
+#assistMerchantid=976060
+#assistLogin=gtsproject_sale
+#assistPassword=1qazqrassist
+setHost=smtp.gmail.com
+setPort=587
+setUsername=oxypay.russia@gmail.com
+setPassword=m20673040!
+mailTransportProtocol=smtp
+mailSmtpAuth=true
+mailSmtpStarttlsEnable=true
+mailDebug=true
\ No newline at end of file
Index: src/main/java/com/webapp/common/interceptor/SessionInterceptor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/interceptor/SessionInterceptor.java	(date 1579192827924)
+++ src/main/java/com/webapp/common/interceptor/SessionInterceptor.java	(date 1579192827924)
@@ -0,0 +1,35 @@
+package com.webapp.common.interceptor;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.web.servlet.ModelAndView;
+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
+
+public class SessionInterceptor extends HandlerInterceptorAdapter {
+	
+	protected final Logger logger = LoggerFactory.getLogger(this.getClass());
+	
+	@Override
+	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
+	    logger.error("===========================          START         ===========================");
+	    logger.error(" Request URI \t:  " + request.getRequestURI());
+	    
+	    Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
+	    
+	    if("anonymous".equals(principal)) {
+	    	response.sendRedirect("/login");
+	    	return false;
+	    }
+	    
+	    return super.preHandle(request, response, handler);
+	 }
+	 
+	 @Override
+	 public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
+	    logger.error("===========================          END           ===========================");
+	 }
+}
Index: src/main/java/com/webapp/common/filter/RequestFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/filter/RequestFilter.java	(date 1579194294862)
+++ src/main/java/com/webapp/common/filter/RequestFilter.java	(date 1579194294862)
@@ -0,0 +1,36 @@
+package com.webapp.common.filter;
+
+
+import java.io.IOException;
+
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+
+import com.webapp.common.support.RereadableRequestWrapper;
+
+
+public class RequestFilter implements Filter {
+	 
+    @Override
+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException { // 모든 요청(Request)에 대해서 이 부분이 실행된다.
+        RereadableRequestWrapper rereadableRequestWrapper = new RereadableRequestWrapper((HttpServletRequest)req);
+        System.out.println("FILTER RequestURL : "+rereadableRequestWrapper.getRequestURL());
+        chain.doFilter(rereadableRequestWrapper, res);
+    }
+ 
+    @Override
+    public void init(FilterConfig config) throws ServletException { // 초기화할 때 실행되는 부분
+        String testParam = config.getInitParameter("testParam");
+        System.out.println("testParam : "+testParam);
+    }
+ 
+    @Override
+    public void destroy() {
+    }
+}
+
Index: src/main/java/com/webapp/common/support/RereadableRequestWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/webapp/common/support/RereadableRequestWrapper.java	(date 1579194352649)
+++ src/main/java/com/webapp/common/support/RereadableRequestWrapper.java	(date 1579194352649)
@@ -0,0 +1,83 @@
+package com.webapp.common.support;
+
+
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+
+import javax.servlet.ReadListener;
+import javax.servlet.ServletInputStream;
+import javax.servlet.ServletRequest;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletRequestWrapper;
+
+import org.apache.commons.io.IOUtils;
+import org.apache.commons.lang3.StringUtils;
+
+
+public class RereadableRequestWrapper extends HttpServletRequestWrapper {
+
+    private final Charset encoding;
+    private byte[] rawData;
+
+    public RereadableRequestWrapper(HttpServletRequest request) throws IOException {
+        super(request);
+
+        String characterEncoding = request.getCharacterEncoding();
+        if (StringUtils.isBlank(characterEncoding)) {
+            characterEncoding = StandardCharsets.UTF_8.name();
+        }
+        this.encoding = Charset.forName(characterEncoding);
+
+        // Convert InputStream data to byte array and store it to this wrapper instance.
+        try {
+            InputStream inputStream = request.getInputStream();
+            this.rawData = IOUtils.toByteArray(inputStream);
+        } catch (IOException e) {
+            throw e;
+        }
+    }
+
+    @Override
+    public ServletInputStream getInputStream() throws IOException {
+        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(this.rawData);
+        ServletInputStream servletInputStream = new ServletInputStream() {
+            public int read() throws IOException {
+                return byteArrayInputStream.read();
+            }
+
+			@Override
+			public boolean isFinished() {
+				// TODO Auto-generated method stub
+				return false;
+			}
+
+			@Override
+			public boolean isReady() {
+				// TODO Auto-generated method stub
+				return false;
+			}
+
+			@Override
+			public void setReadListener(ReadListener arg0) {
+				// TODO Auto-generated method stub
+				
+			}
+        };
+        return servletInputStream;
+    }
+
+    @Override
+    public BufferedReader getReader() throws IOException {
+        return new BufferedReader(new InputStreamReader(this.getInputStream(), this.encoding));
+    }
+
+    @Override
+    public ServletRequest getRequest() {
+        return super.getRequest();
+    }
+}
